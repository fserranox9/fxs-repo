{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/compat get default export","webpack://excel-custom-functions-js/webpack/runtime/define property getters","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n\n\n  url = String(url.__esModule ? url.default : url);\n\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t41: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","\n/****************************************************************************************\n * \n *                --------- AgencyDetails Class ----------------\n *    Builds a single employer with its multiple rate plans associated with it.\n *    Column indexes correspond to the import_rate_plan_info range. \n * \n ****************************************************************************************/\n\nclass AgencyDetails{\n\n  constructor(p_name, p_cid){\n    this.name = p_name;\n    this.cid = p_cid;\n    this.rateplans = [];\n    this.allplanlist = [];\n  }\n  \n  getRatePlans(data){\n    for (let row = 0; row < data.length; row++){\n      if (row > 0 && data[row][0] !=\"\"){\n        this.allplanlist.push({\n          VRP: data[row][0],\n          ERName: data[row][1],\n          RPName: data[row][2],\n          CountyName: data[row][3],\n          ActuaryName: data[row][4],\n          RiskPoolID: data[row][5],\n          CalPERSID: data[row][6],\n        });\n      }\n\n\n        if (this.cid == data[row][6]) \n        {\n          vrp = data[row][0];\n          vrpname = data[row][2];\n          actuaryname = data[row][4];\n          riskpool = data[row][5];\n\n          this.rateplans.push({\n            Rate_Plan_Id : vrp,\n            Rate_Plan_Name : vrpname,\n            Actuary_Name : actuaryname,\n            Risk_Pool : riskpool\n          });\n        }\n    }\n\n  }\n\n}\n\n/****************************************************************************************\n * \n *                --------- AssumptionDetails Class ----------------\n *    Builds details about the assumption currently being used in the wb.\n *    parameters are coming from the control tab\n * \n ****************************************************************************************/\n\nclass AssumptionDetails{\n\n  constructor(p_vy, p_interest, p_salarygrowth){\n    this.year = p_vy;\n    this.valuationyear = \"06/30/\" + p_vy;\n    this.i = Number(p_interest);\n    this.s = Number(p_salarygrowth);\n  }\n\n}\n\n/****************************************************************************************\n * \n *                --------- TableStructure Class ----------------\n *   \n * \n ****************************************************************************************/\n\nclass TableStructure {\n\n  constructor(oAgency, oAssumptions, pTableNameID, pDataSource, aFieldCodes, aFormatCodes, aVisibilityCodes, aERTotalRowCodes){\n    this.TableNameId = pTableNameID;\n    this.DataSource = pDataSource;\n    this.FieldCodes = aFieldCodes;\n    this.FormatCodes = aFormatCodes;\n    this.VisibilityCodes = aVisibilityCodes;\n    this.ERTotalRowCodes = aERTotalRowCodes;\n    this.FieldNames = [];\n    this.ERTotalRowValues = [];\n    this.SumTotalValues = [];\n    this.VRPValues = [];\n    this.getFieldNames(oAgency);\n    this.getVRPValues(oAgency, oAssumptions);\n    this.getSumTotalvalues();\n    this.getERTotalRowValues();\n  }\n\n  getFieldNames(oAgency){\n    const colMax = this.DataSource[0].length;\n    this.FieldCodes.forEach(fincode =>{\n      let tmp_fieldname = fincode;\n      for ( let col = 0; col < colMax; col++){\n        if (fincode == this.DataSource[1][col]){  //assumes the fin code row is the second row in the range. ok for now, may need to param\n          tmp_fieldname = this.DataSource[0][col];\n          break;\n        }\n      }\n    this.FieldNames.push(tmp_fieldname);\n    });\n  }\n\n  getVRPValues(oAgency, oAssumptions){\n\n    const rowMax = this.DataSource.length;\n    const colMax = this.DataSource[0].length;\n\n    this.FieldCodes.forEach(fincode =>{\n      let tmp_vrpvalues = [];\n      Object.keys(oAgency.rateplans).forEach(key => {\n        let vrp = oAgency.rateplans[key].Rate_Plan_Id;\n        for (let row = 0; row < rowMax; row++) {\n          if (vrp == this.DataSource[row][2]) {     //assumes the vrp list column is the 3rd column of the range. ok for now, may need to param\n            for ( let col = 0; col < colMax; col++){\n              if (fincode == this.DataSource[1][col]){   //assumes the fin code row is the second row in the range. ok for now, may need to param\n                tmp_vrpvalues.push({ Rate_Plan_Id : vrp, RP_FinCode : fincode, RP_Value : this.DataSource[row][col]});\n              }\n            }\n          }\n        }\n      });\n      if (!tmp_vrpvalues.length){ //handles if no fincode is matched\n        Object.keys(oAgency.rateplans).forEach(key => {\n        tmp_vrpvalues.push({ Rate_Plan_Id : 0, RP_FinCode : 0, RP_Value : 0});\n        });\n      };  \n      this.VRPValues.push(tmp_vrpvalues);\n    });\n\n  }\n\n  getSumTotalvalues(){\n\n    for( let f = 0; f < this.FieldCodes.length; f++){\n      let fsum = 0;\n      for( let v = 0; v < this.VRPValues[0].length; v++){\n        fsum = fsum + Number(this.VRPValues[f][v].RP_Value);\n      }\n      this.SumTotalValues.push(fsum);\n    }\n\n  }\n\n  getERTotalRowValues(){\n\n    for( let f = 0; f < this.FieldCodes.length; f++){\n      if (this.ERTotalRowCodes[f] == \"SUM\" ){\n        this.ERTotalRowValues.push(this.SumTotalValues[f]);\n      }\n      else if (this.ERTotalRowCodes[f] == \"N/A\" ){\n        this.ERTotalRowValues.push(\"N/A\");\n      }\n      else if (this.ERTotalRowCodes[f] == \"NULL\" ){\n        this.ERTotalRowValues.push(\"\");\n      }\n      else{\n        retval = eval(this.ERTotalRowCodes[f]);\n        this.ERTotalRowValues.push(retval);\n        this.SumTotalValues[f] = retval;    //the ERTotal and SUMTotal will be the same\n      }\n    }\n  }\n\n  RatioOfSums(val1, val2){ \n    if(this.SumTotalValues[this.FieldNames.indexOf(val2)] == 0 || this.SumTotalValues[this.FieldNames.indexOf(val2)] == \"\")\n    {return 0}\n    return this.SumTotalValues[this.FieldNames.indexOf(val1)] / this.SumTotalValues[this.FieldNames.indexOf(val2)];\n  }\n\n  SumOfTotals(val1, val2){ \n    return this.SumTotalValues[this.FieldNames.indexOf(val1)] + this.SumTotalValues[this.FieldNames.indexOf(val2)];\n  }  \n\n  SumOfProducts(val1, val2){\n\n    let sum = 0;\n    for(let v = 0; v < this.VRPValues[0].length; v++)\n    {\n      sum = sum + (this.VRPValues[this.FieldNames.indexOf(val1)][v].RP_Value * this.VRPValues[this.FieldNames.indexOf(val2)][v].RP_Value);\n    }\n    return sum;\n\n  }\n  \n}\n\n/****************************************************************************************\n * \n *                --------- Office OnReady! ----------------\n *    Main Point of entry. \n * \n ****************************************************************************************/\n\nOffice.onReady(() =>{\n  \n});\n\nOffice.initialize = () => {\n  document.getElementById(\"buttonFreshStart\").onclick = readFSPanel;\n  document.getElementById(\"reLoad\").onclick = function() {FetchExcelData(); getAmortSummary();}\n  document.getElementById(\"buttonResetFS\").onclick = getAmortSummary;\n  // Add the event handler.\n  Excel.run(async context => {\n    let sheet = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\");\n    sheet.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the onChanged event.\");\n  });\n};\n\n/**\n * Handle the changed event from the worksheet.\n *\n * @param event The event information from Excel\n */\nasync function onChange(event) {\n    await Excel.run(async (context) => {    \n        await context.sync();\n        VRPTrigger(event);\n  });\n}\n\n/****************************************************************************************\n * \n *                --------- VRPTrigger ----------------\n *    Catches the event in which the rpid named range in excel has changed.\n *    If triggred then initiates other functions to begin\n *    This is where other calls can be initiated\n * \n ****************************************************************************************/\n\nasync function VRPTrigger(event) {\n\n  try{\n    await Excel.run(async (context) => {\n\n    const sheetER = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\");\n\n    const vrpId = sheetER.getRange(\"rpid\");\n\n    vrpId.load(\"address, values\");\n\n    await context.sync();    \n    \n    // get VRP location in workbook\n    const vrpRngLoc = vrpId.address.slice(vrpId.address.indexOf(\"!\") + 1);\n\n    if (event.address == vrpRngLoc )\n    {\n        console.log(`Event: Cell-Address: ${event.address}  Type: ${event.changeType}  Source: ${event.source}`)     \n        FetchExcelData();\n        getAmortSummary();\n    }\n    \n    })\n  }\n  catch(error){console.error(error);}\n}\n\n/****************************************************************************************\n * \n *                --------- FetchExcelData ----------------\n *    Will read data from excel and load it. After loading the data, the process of\n *    building the content begins.\n *    ?? reconsider loading data only on workbook open? rather refreshing every VRPtrigger?\n * \n ****************************************************************************************/\n\nasync function FetchExcelData(){\n  \n  await Excel.run(async (context) => {\n\n    const sheetRPfinancingAll = context.workbook.worksheets.getItem(\"export_rp_financing_all\");\n    const sheetPostRPfinancing = context.workbook.worksheets.getItem(\"export_post_rp_financing\");\n    const sheetCalcsCurRP = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\");\n    const sheetRPinfo = context.workbook.worksheets.getItem(\"import_rate_plan_info\");\n    const sheetControl = context.workbook.worksheets.getItem(\"control\");\n    const sheetPEPRAEe = context.workbook.worksheets.getItem(\"PEPRA_EE_Rates\");\n\n    const exl_RPfinancingAll = sheetRPfinancingAll.getRange(\"A3:NM3000\");\n    const exl_PostRPfinancing = sheetPostRPfinancing.getRange(\"A3:N3000\");\n    const exl_RPinfo = sheetRPinfo.getRange(\"B2:I3000\");\n    const exl_PEPRAEe = sheetPEPRAEe.getRange(\"B3:M50\"); \n\n    const exl_EmployerName = sheetCalcsCurRP.getRange(\"org\");\n    const exl_CalpersId = sheetCalcsCurRP.getRange(\"calpers_id\");\n\n    const exl_ValuationYear = sheetControl.getRange(\"current_year\");\n    const exl_InterestRate = sheetControl.getRange(\"interest_rate\");\n    const exl_PayrollGrowth = sheetControl.getRange(\"payroll_growth\");\n\n    //Financial Data\n    exl_RPfinancingAll.load(\"address, columnCount, rowCount, values\");\n    exl_PostRPfinancing.load(\"address, columnCount, rowCount, values\");\n    exl_RPinfo.load(\"address, columnCount, rowCount, values\");\n    exl_PEPRAEe.load(\"address, columnCount, rowCount, values\");\n\n    //Employer Details\n    exl_EmployerName.load(\"values\");\n    exl_CalpersId.load(\"values\");\n\n    //assumptions\n    exl_ValuationYear.load(\"values\");\n    exl_InterestRate.load(\"values\");\n    exl_PayrollGrowth.load(\"values\");\n\n  await context.sync();  \n\n    //build AgencyDetail class\n    const RPinfo = exl_RPinfo.values;\n    const Agency = new AgencyDetails(exl_EmployerName.values, exl_CalpersId.values);\n    Agency.getRatePlans(RPinfo);\n    \n   //override instance\n\n    //build AssumptionDetails class\n    const Assumptions = new AssumptionDetails(exl_ValuationYear.values, exl_InterestRate.values, exl_PayrollGrowth.values)\n    \n    // All financial data placed in array\n    const Data = [exl_RPfinancingAll.values, exl_PostRPfinancing.values, exl_PEPRAEe.values];\n\n      console.log(`The employer currently loaded is: ${Agency.name} - CID: ${Agency.cid} `) ;\n      console.log(\"The associated rate plans are:\"); console.log(Agency.rateplans);\n      console.log(`The current Assumptions for Valuation Year: ${Assumptions.valuationyear} - Interest Rate: ${Assumptions.i} - Salary Growth Rate: ${Assumptions.s}`) ;\n\n      LoadInfoToDoc(Agency, Assumptions, RPinfo);\n\n      SummaryTableControl(Agency, Assumptions, Data)\n  });\n\n}\n\n/****************************************************************************************\n * \n *                --------- LoadInfoToDoc ----------------\n *    Transfers over agency and assumptions to the html page  \n * \n ****************************************************************************************/\n\nfunction LoadInfoToDoc(oAgency, oAssum){\n    \n  document.getElementById(\"idERname\").innerHTML = oAgency.name;\n  document.getElementById(\"idERcid\").innerHTML = oAgency.cid;\n  document.getElementById(\"idVY\").innerHTML = oAssum.valuationyear;\n\n  populateFSPanel(oAgency);\n}\n\n/****************************************************************************************\n * \n *                --------- SummaryTableControl ----------------\n *    This initiates the build for all tables along with its desired behavior and \n *    description of what the table is.  The common structure is that the first columns \n *    are the plan name and vrp id fields from the agency object. The common table has VRPs for \n *    its rows and the financial data as its fields(columns).\n * \n ****************************************************************************************/\n\nfunction SummaryTableControl(oAgency, oAssumptions, aData){\n\n  //Break the array of Data.   DataSets\n  const DS0 = aData[0];     //export_rp_financing_all\n  const DS1 = aData[1];     //export_post_rp_financing\n  const DS2 = aData[2];     //PEPRA_EE_Rates\n\n  /* Format Codes\n  #1 - Number with commas\n  #2 - Percent rounded to 2 decimal\n  #3 - number rounded to 2 decimal\n  #4 - No formating\n  */\n\n   /* Visbility Codes\n  #0 - Dont display VRP rows.  Total bottom row will still display\n  #1 - Display\n  */\n\n   /* ER Total Codes\n  N/A - Not Applicable\n  SUM - Straight sum of field\n  NULL - empty\n  RatioOfSums(v1,v2) - stringliteral evaluation. Ratio of field sums v1, v2\n  SumOfProducts(v1,v2) - stringliteral evaluation. sum of product of vrp level value v1, v2\n  SumOfTotals(v1,v2) - stringliteral evaluation. sum of field sums v1, v2\n  */\n\n  // **** -- Sensitivity Analysis Tables -- *****\n\n    // --- Maturity Measures ---\n    const TableNameID_MM = \"idTblmaturityMeasures\";\n    const DataSource_MM = DS0;\n    const FieldCodes_MM = [786,787,63,66,788,14,16];\n    const FormatCodes_MM = [3,3,1,1,1,1,1];\n    const VisibilityCodes_MM = [1,1,1,1,1,1,1];\n    const ERTotalRowCodes_MM = [\"this.RatioOfSums('AL Status 5', 'AL Total')\",\"this.RatioOfSums('# Stat 1', 'Unique Retiree Count')\",\"SUM\",\"SUM\",\"SUM\",\"SUM\",\"SUM\"];\n\n    const oTable_MM = new TableStructure(oAgency, oAssumptions, TableNameID_MM, DataSource_MM, FieldCodes_MM, FormatCodes_MM, VisibilityCodes_MM, ERTotalRowCodes_MM)\n\n    // --- Hypothetical Termination ---\n    const TableNameID_HT = \"idTblHypotheticalTerm\";\n    const DataSource_HT = DS0;\n    const FieldCodes_HT = [689,690,691,692,693,694];;\n    const FormatCodes_HT = [1,1,2,1,1,2];\n    const VisibilityCodes_HT = [1,1,1,1,1,1];\n    const ERTotalRowCodes_HT = [\"SUM\",\"SUM\",\"1-this.RatioOfSums('Term - Low UAL', 'Term - Low AL Total')\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('Term - High UAL', 'Term - High AL Total')\"];\n\n    const oTable_HT = new TableStructure(oAgency, oAssumptions, TableNameID_HT, DataSource_HT, FieldCodes_HT, FormatCodes_HT, VisibilityCodes_HT, ERTotalRowCodes_HT);   \n\n    // --- Discount Rate Sensitivity ---\n    const TableNameID_DR = \"idTblDiscountSensitivity\";\n    const DataSource_DR = DS0;\n    const FieldCodes_DR = [626,627,766,767,760,761,615,616,628,629,768,769];\n    const FormatCodes_DR = [2,1,1,2,2,1,1,2,2,1,1,2];\n    const VisibilityCodes_DR = [1,1,1,1,1,1,1,1,1,1,1,1];\n    const ERTotalRowCodes_DR = [\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('-1% UAL Total', '-1% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('UAL(AL-MVA)', '0% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('+1% UAL Total', '+1% AL')\"];\n\n    const oTable_DR = new TableStructure(oAgency, oAssumptions, TableNameID_DR, DataSource_DR, FieldCodes_DR, FormatCodes_DR, VisibilityCodes_DR, ERTotalRowCodes_DR);  \n\n    // --- Inflation Last Annual Sensitivity ---\n    const TableNameID_IL = \"idTblInflationSensitivity\";\n    const DataSource_IL = DS0;\n    const FieldCodes_IL = [770,771,772,773,760,761,615,616,774,775,776,777];\n    const FormatCodes_IL = [2,1,1,2,2,1,1,2,2,1,1,2];\n    const VisibilityCodes_IL = [1,1,1,1,1,1,1,1,1,1,1,1];\n    const ERTotalRowCodes_IL= [\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('-1% UAL Total', '-1% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('UAL(AL-MVA)', '0% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('+1% UAL Total', '+1% AL')\"];\n\n    const oTable_IL = new TableStructure(oAgency, oAssumptions, TableNameID_IL, DataSource_IL, FieldCodes_IL, FormatCodes_IL, VisibilityCodes_IL, ERTotalRowCodes_IL);  \n\n    // --- Mortality Sensitivity ---\n    const TableNameID_MS = \"idTblMortalitySensitivity\";\n    const DataSource_MS  = DS0;\n    const FieldCodes_MS  = [778,779,780,781,760,761,615,616,782,783,784,785];\n    const FormatCodes_MS  = [2,1,1,2,2,1,1,2,2,1,1,2];\n    const VisibilityCodes_MS  = [1,1,1,1,1,1,1,1,1,1,1,1];\n    const ERTotalRowCodes_MS = [\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('-10% UAL Total', '-10% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('UAL(AL-MVA)', '0% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('+10% UAL Total', '+10% AL')\"];\n\n    const oTable_MS  = new TableStructure(oAgency, oAssumptions, TableNameID_MS, DataSource_MS, FieldCodes_MS, FormatCodes_MS, VisibilityCodes_MS, ERTotalRowCodes_MS);    \n    \n    // --- Assets ---\n    const TableNameID_MVA = \"idTblMVA\";\n    const DataSource_MVA  = DS0;\n    const FieldCodes_MVA  = [563];\n    const FormatCodes_MVA  = [1];\n    const VisibilityCodes_MVA  = [1];\n    const ERTotalRowCodes_MVA = [\"SUM\"];\n\n    const oTable_MVA  = new TableStructure(oAgency, oAssumptions, TableNameID_MVA, DataSource_MVA, FieldCodes_MVA, FormatCodes_MVA, VisibilityCodes_MVA, ERTotalRowCodes_MVA);    \n\n    // --- LDROM ---\n    const TableNameID_LDROM = \"idTblLDROM\";\n    const DataSource_LDROM  = DS0;\n    const FieldCodes_LDROM  = [2950,2951,2952,2953,2954,2955,2510];\n    const FormatCodes_LDROM  = [1,1,1,1,1,1,1];\n    const VisibilityCodes_LDROM  = [1,1,1,1,1,1,1];\n    const ERTotalRowCodes_LDROM = [\"SUM\",\"SUM\",\"SUM\",\"SUM\",\"SUM\",\"SUM\",\"SUM\"]\n    const oTable_LDROM  = new TableStructure(oAgency, oAssumptions, TableNameID_LDROM, DataSource_LDROM, FieldCodes_LDROM, FormatCodes_LDROM, VisibilityCodes_LDROM, ERTotalRowCodes_LDROM);    \n    \n\n  // **** -- Projected Contributions Tables -- ***** \n  \n    // --- Projections 0 ---\n    const TableNameID_P0 = \"idTblprojections0\";\n    const DataSource_P0  = DS0;\n    const FieldCodes_P0 = [2801,718, 717,636,707,'X'];\n    const FormatCodes_P0  = [1,1,1,2,2,2];\n    const VisibilityCodes_P0  = [1,1,1,1,1,0];\n    const ERTotalRowCodes_P0 = [\"SUM\",\"SUM\",\"SUM\",\"this.RatioOfSums('UAL Payment $','Payroll Projection Yr 3')\",`this.RatioOfSums(\"Plan's Net ER NC $\",\"Payroll Projection Yr 3\")`, `this.SumOfTotals(\"Plan's Net ER NC %\",\"UAL% 50-1\")`];\n\n    const oTable_P0  = new TableStructure(oAgency, oAssumptions, TableNameID_P0, DataSource_P0, FieldCodes_P0, FormatCodes_P0, VisibilityCodes_P0, ERTotalRowCodes_P0);    \n    \n    // --- Projections 1 ---\n    const TableNameID_P1 = \"idTblprojections1\";\n    const DataSource_P1  = DS0;\n    const FieldCodes_P1 = [2802,631, 'X', 637, 630, 'Y']; \n    const FormatCodes_P1  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P1  = [1,1,0,1,1,0];\n    const ERTotalRowCodes_P1 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 4','Proj ERNC%')\",\"this.RatioOfSums('UAL$ 50-1','Payroll Projection Yr 4')\", \"this.RatioOfSums('X','Payroll Projection Yr 4')\", `this.SumOfTotals(\"UAL% 50-2\",\"Proj ERNC%\")`];\n\n    const oTable_P1  = new TableStructure(oAgency, oAssumptions, TableNameID_P1, DataSource_P1, FieldCodes_P1, FormatCodes_P1, VisibilityCodes_P1, ERTotalRowCodes_P1);    \n    \n    // --- Projections 2 ---\n    const TableNameID_P2 = \"idTblprojections2\";\n    const DataSource_P2  = DS0;\n    const FieldCodes_P2 = [2803,632, 'X', 638, 731, 'Y']; \n    const FormatCodes_P2  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P2  = [1,1,0,1,1,0];\n    const ERTotalRowCodes_P2 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 5','NC% 50-2')\",\"this.RatioOfSums('UAL$ 50-2','Payroll Projection Yr 5')\", \"this.RatioOfSums('X','Payroll Projection Yr 5')\", `this.SumOfTotals(\"UAL% 50-3\",\"NC% 50-2\")`];\n\n    const oTable_P2  = new TableStructure(oAgency, oAssumptions, TableNameID_P2, DataSource_P2, FieldCodes_P2, FormatCodes_P2, VisibilityCodes_P2, ERTotalRowCodes_P2);    \n\n    // --- Projections 3 ---\n    const TableNameID_P3 = \"idTblprojections3\";\n    const DataSource_P3  = DS0;\n    const FieldCodes_P3 = [2804,633, 'X', 639, 732, 'Y']; \n    const FormatCodes_P3  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P3  = [1,1,0,1,1,0];\n    const ERTotalRowCodes_P3 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 6','NC% 50-3')\",\"this.RatioOfSums('UAL$ 50-3','Payroll Projection Yr 6')\", \"this.RatioOfSums('X','Payroll Projection Yr 6')\", `this.SumOfTotals(\"UAL% 50-4\",\"NC% 50-3\")`];\n\n    const oTable_P3  = new TableStructure(oAgency, oAssumptions, TableNameID_P3, DataSource_P3, FieldCodes_P3, FormatCodes_P3, VisibilityCodes_P3, ERTotalRowCodes_P3);    \n\n    // --- Projections 4 ---\n    const TableNameID_P4 = \"idTblprojections4\";\n    const DataSource_P4  = DS0;\n    const FieldCodes_P4 = [2805,634, 'X', 640, 733, 'Y']; \n    const FormatCodes_P4  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P4  = [1,1,0,1,1,0];\n    const ERTotalRowCodes_P4 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 7','NC% 50-4')\",\"this.RatioOfSums('UAL$ 50-4','Payroll Projection Yr 7')\", \"this.RatioOfSums('X','Payroll Projection Yr 7')\", `this.SumOfTotals(\"UAL% 50-5\",\"NC% 50-4\")`];\n\n    const oTable_P4  = new TableStructure(oAgency, oAssumptions, TableNameID_P4, DataSource_P4, FieldCodes_P4, FormatCodes_P4, VisibilityCodes_P4, ERTotalRowCodes_P4);    \n\n\n    // --- Projections 5 ---\n    const TableNameID_P5 = \"idTblprojections5\";\n    const DataSource_P5  = DS0;\n    const FieldCodes_P5 = [2806,635, 'X',640, 734, 'Z']; \n    const FormatCodes_P5  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P5  = [1,1,0,0,1,0];\n    const ERTotalRowCodes_P5 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 8','NC% 50-5')\",\"this.RatioOfSums('UAL$ 50-5','Payroll Projection Yr 8')\", \"this.RatioOfSums('X','Payroll Projection Yr 8')\", `this.SumOfTotals(\"UAL% 50-5\",\"NC% 50-5\")`];\n\n    const oTable_P5  = new TableStructure(oAgency, oAssumptions, TableNameID_P5, DataSource_P5, FieldCodes_P5, FormatCodes_P5, VisibilityCodes_P5, ERTotalRowCodes_P5);    \n    \n\n    // --- Projections 6 ---\n    const TableNameID_P6 = \"idTblprojections6\";\n    const DataSource_P6  = DS0;\n    const FieldCodes_P6 = [2807,752, 'X',640 , 734, 'Z']; \n    const FormatCodes_P6  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P6  = [1,1,0,0,1,0];\n    const ERTotalRowCodes_P6 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 9','NC% 50-5')\",\"this.RatioOfSums('UAL$ 50-6','Payroll Projection Yr 9')\", \"this.RatioOfSums('X','Payroll Projection Yr 9')\", `this.SumOfTotals(\"UAL% 50-5\",\"NC% 50-5\")`];\n\n    const oTable_P6  = new TableStructure(oAgency, oAssumptions, TableNameID_P6, DataSource_P6, FieldCodes_P6, FormatCodes_P6, VisibilityCodes_P6, ERTotalRowCodes_P6);    \n\n\n  DataTableToHTML(oTable_MM, oAgency);\n  DataTableToHTML(oTable_HT, oAgency);\n  DataTableToHTML(oTable_DR, oAgency);\n  DataTableToHTML(oTable_IL, oAgency);\n  DataTableToHTML(oTable_MS, oAgency);\n  DataTableToHTML(oTable_MVA, oAgency);\n  DataTableToHTML(oTable_LDROM, oAgency);\n  DataTableToHTML(oTable_P0, oAgency);\n  DataTableToHTML(oTable_P1, oAgency);\n  DataTableToHTML(oTable_P2, oAgency);\n  DataTableToHTML(oTable_P3, oAgency);\n  DataTableToHTML(oTable_P4, oAgency);\n  DataTableToHTML(oTable_P5, oAgency);\n  DataTableToHTML(oTable_P6, oAgency);\n}\n\n/****************************************************************************************\n * \n *                --------- DataTableToHTML ----------------\n *    Transfers the table structure into a table in the HTML document.\n *    Formats and appends the the rateplanname and VRPid to the first 2 cols.\n * \n ****************************************************************************************/\n\nfunction DataTableToHTML(oTable, oAgency){\n\n  let tableBody = document.getElementById(oTable.TableNameId).getElementsByTagName('tbody')[0];\n  let tableFoot= document.getElementById(oTable.TableNameId).getElementsByTagName('tfoot')[0];\n  while(tableBody.rows.length > 0) tableBody.deleteRow(0);\n  while(tableFoot.rows.length > 0) tableFoot.deleteRow(0);\n\n  for (let vrp = 0; vrp < oAgency.rateplans.length; vrp++)\n  {\n    var row = tableBody.insertRow(-1);\n\n    var cellPlanName = row.insertCell(-1);\n    cellPlanName.innerHTML = oAgency.rateplans[vrp].Rate_Plan_Name;\n    var cellPlanID = row.insertCell(-1);\n    cellPlanID.innerHTML = oAgency.rateplans[vrp].Rate_Plan_Id;\n\n    for(let fcode = 0; fcode < oTable.FieldCodes.length; fcode++) \n    {\n      var cellVal = row.insertCell(-1);\n\n      let formatCode = Number(oTable.FormatCodes[fcode]);\n      let visibleCode = Number(oTable.VisibilityCodes[fcode]);\n\n      let FormatVisible = formatCode * visibleCode;\n\n      var result = oTable.VRPValues[fcode][vrp].RP_Value;\n      cellVal.innerHTML = result;\n\n      switch (FormatVisible){\n        case 0:\n          cellVal.innerHTML = \"\";\n          break;\n        case 1:\n          cellVal.innerHTML = result.toLocaleString(\"en-US\");\n          break;\n        case 2:\n          cellVal.innerHTML = Number(result).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2}); \n          break;\n        case 3:\n          if ( result != \"\" ){\n            cellVal.innerHTML = Number(result).toFixed(2);\n          }\n          else{\n            cellVal.innerHTML = \"N/A\";\n          }\n          break;\n        case 4:\n          cellVal.innerHTML = result; \n          break;\n      }\n\n    }\n  }\n\n  var rowF = tableFoot.insertRow(-1);\n  let cellER = rowF.insertCell(-1);\n  cellER.colSpan = \"2\";\n  cellER.innerHTML = \"Employer Total:\"\n\n  for(let fcode = 0; fcode < oTable.FieldCodes.length; fcode++) \n  {\n\n    let formatCode = Number(oTable.FormatCodes[fcode]);\n    let result = oTable.ERTotalRowValues[fcode]\n    let cellf = rowF.insertCell(-1);\n\n    switch (formatCode){\n      case 0:\n        cellf.innerHTML = result;\n        break;\n      case 1:\n        if ( result != \"\" ){\n          result = Number(result).toFixed(0);\n          cellf.innerHTML = Number(result).toLocaleString(\"en-US\");\n        }\n        else{\n          cellf.innerHTML = \"N/A\";\n        }\n        break;\n      case 2:\n        if ( result != \"\" ){\n        cellf.innerHTML = Number(result).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2}); \n        }\n        else{\n          cellf.innerHTML = \"N/A\";\n        }      \n        break;\n      case 3:\n        if ( result != \"\" ){\n          cellf.innerHTML = Number(result).toFixed(2);\n        }\n        else{\n          cellf.innerHTML = \"N/A\";\n        }\n        break;\n      case 4:\n        cellf.innerHTML = result; \n        break; \n    }\n  }\n\n}\n\n\n/****************************************************************************************\n * \n *                --------- Amort Code ----------------\n * \n ****************************************************************************************/\n\n\n// BarChartData class definition\n//const globalDataUAL = {\n  class ChartDataUAL {\n    constructor() {\n      this.data = [];\n    }\n    // Method to append new datasets\n    addData(plan, planAmortSch, planColor, planBorderColor) {\n      var objData = {\n        label: \"VRP \" + plan,\n        data: planAmortSch[\"Total Payments\"].slice(),\n        backgroundColor: planColor,\n        borderColor: planBorderColor\n      };\n    \n      this.data.push(objData);\n      console.log('UAL data has been appended')\n    }\n    addBalanceData(plan, planAmortSch, planColor, planBorderColor) {\n      var objData = {\n        label: \"VRP \" + plan,\n        data: planAmortSch[\"Total Balance\"].slice(),\n        backgroundColor: planColor,\n        borderColor: planBorderColor\n      };\n    \n      this.data.push(objData);\n      console.log('UAL data has been appended')\n    }\n  };\n  \n  // Global variables for two instances of UAL bar chart data\n  let barChartUAL = new ChartDataUAL;\n  let barChartUALBalance = new ChartDataUAL;\n  let barChartHypUAL = new ChartDataUAL;\n  var chart1Canvas = document.getElementById(\"chartUAL\");\n  var chart2Canvas = document.getElementById(\"chartHypUAL\");\n  var chart1 = chart1Canvas.getContext('2d');\n  var chart2 = chart2Canvas.getContext('2d');\n  var globalDRate = 0;\n  \n  \n  \n  const globalChartBarColors = [\n    'rgba(201, 203, 207, 0.7)',\n    'rgba(255, 159, 64, 0.7)',\n    'rgba(153, 102, 255, 0.7)',\n    'rgba(255, 205, 86, 0.7)',\n    'rgba(75, 192, 192, 0.7)',\n    'rgba(54, 162, 235, 0.7)',\n    'rgba(255, 99, 132, 0.7)'  \n  ];\n  \n  const globalChartBorderColors = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(201, 203, 207)',\n    'rgb(255, 159, 64)',\n    'rgb(153, 102, 255)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(255, 99, 132)' \n  ];\n  \n // Add value labels on each element within a stack\n Chart.plugins.register({\n  afterDatasetsDraw: function (chart, easing) {\n    var ctx = chart.ctx;\n    var grandTotal = 0;\n\n    chart.data.labels.forEach(function (label, labelIndex) {\n      var total = 0;\n      var highestIndex = 0;\n      chart.data.datasets.forEach(function (dataset, datasetIndex) {\n        var meta = chart.getDatasetMeta(datasetIndex);\n        if (!meta.hidden) {\n          total += dataset.data[labelIndex];\n          highestIndex = datasetIndex\n        };\n      });\n      grandTotal += total;\n\n      // Display total at the top of each category\n      var xPos = chart.getDatasetMeta(highestIndex).data[labelIndex]._model.x;\n      var yPos = chart.getDatasetMeta(highestIndex).data[labelIndex]._model.y - 5; // Adjust label position as needed\n      ctx.save(); // .save and .restore functions are used to save and restore the drawing state before and after rotation\n      ctx.translate(xPos, yPos);  // Move the drawing origin to the desired position\n      ctx.rotate(-Math.PI / 2); // 90 degree rotate\n      ctx.fillStyle = 'black'; // Label text color\n      ctx.font = '12px Arial'; // Label font size and family\n      ctx.textAlign = 'center';\n      ctx.fillText(total.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"), 0, 0);\n      ctx.restore();\n    });\n    // Grand Total:\n    ctx.save();\n    ctx.fillStyle = 'black'; // Label text color\n    ctx.font = '12px Arial'; // Label font size and family\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'top';\n    ctx.fillText(`Total Payments: ${grandTotal.toLocaleString()}`, chart.width - 10, 50);\n    ctx.restore();\n  }\n});\n  \n  //Added 2/8/24\n  function renderUALChart(chartName, cDataSet) {\n    const ctx = document.getElementById(chartName).getContext('2d');  //move this to async function?\n    var xValues = [];\n    for (let i = 0; i < cDataSet[0][\"data\"].length; i++) {\n      xValues.push(2024 + i); //parameterize starting year so not hard-coded\n    };\n    Chart.Legend.prototype.afterFit = function() {\n      this.height = this.height + 35;\n    };  \n    const chartUAL = new Chart(chartName,{\n      type: 'bar',\n      data: {\n          labels: xValues,\n          datasets: cDataSet\n      },\n      options: {\n           legend: {\n               \n           },\n          scales: {\n            xAxes: [{ stacked: true }],\n            yAxes: [{ stacked: true, \n              ticks: { \n                callback: function (value, index, values) {\n                  //return '$' + value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n                  return '$' + value.toLocaleString();\n                }\n              } \n            }]\n          },\n          tooltips: {\n            callbacks: {\n              label: function (tooltipItem, data) {\n                return '$' + tooltipItem.yLabel.toLocaleString();\n              }\n            }\n          }\n      }\n  \n    });\n  \n    // Expose  chart globally if to update later\n    if (chartName == \"chartUAL\") {\n      window.chartUAL = chartUAL;\n    } else if (chartName == \"chartHypUAL\") {\n      window.chartHypUAL = chartUAL;\n    }\n\n  }\n  \n  // Added 1/19/24\n  async function getPoolSummary() {\n    try {\n      await Excel.run(async (context) => {\n        // Get the selected range\n        let sheetER = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\")\n        let sheetFinRslt = context.workbook.worksheets.getItem(\"export_rp_financing_all\")\n        //const selectedRange = context.workbook.getSelectedRange();\n        const keyColumnIndex = 0;\n        const employerCID = sheetER.getRange(\"calpers_id\");\n        const employerRslts = sheetFinRslt.getRange(\"A5:NM3000\");\n        const employerRsltsKey = sheetFinRslt.getRange(\"A4:NM4\");\n        const finRsltCds = [63, 788];\n        ////////////////////////////////////////////////////////\n        ////////  Financing Result Codes: \n        ////////    63 - Total Active #\n        ////////    788 - Total Unique Retiree #\n        ////////////////////////////////////////////////////////\n  \n        // Load the values of the selected range\n        employerCID.load(\"values\");\n        employerRslts.load(\"address, columnCount, rowCount, values\");\n        employerRsltsKey.load(\"address, columnCount, rowCount, values\");\n  \n        // Run the queued commands to load values\n        await context.sync();\n  \n        // Calculate totals and averages\n        var rsltColumnIndex = 0\n        const values = employerRslts.values;\n  \n        // Create lists to store matching rows and columns to sum across\n        const matchingRows = [];\n        const matchingColumns = [];\n  \n        // Iterate through the rows and identify matching rows\n        for (let row = 0; row < employerRslts.values.length; row++) {\n          const key = employerRslts.values[row][keyColumnIndex];\n          if (employerCID.values == key) {\n            matchingRows.push(row);\n          }\n        }\n  \n        // Iterate through the columns and identify matching columns\n        for (let col = 3; col < employerRslts.columnCount; col++) {\n          const header = employerRsltsKey.values[0][col];\n          if (finRsltCds.includes(header)) {\n            matchingColumns.push(col);\n          }\n        }\n  \n        // Create a dictionary to store totals for each column\n        const columnTotals = {};\n  \n        // Iterate only across the relevant portion of the result range for totals\n        for (const col of matchingColumns) {\n          // Initialize total for the column if not already present\n          const rsltType = Number(employerRsltsKey.values[0][col]);\n          columnTotals[rsltType] = columnTotals[rsltType] || 0;\n  \n          for (const row of matchingRows) {\n            if (employerCID.values == employerRslts.values[row][keyColumnIndex]) {\n              const numericValue = Number(employerRslts.values[row][col]); //First column is indexed to 0\n              if (!isNaN(numericValue)) {\n                columnTotals[rsltType] += numericValue;\n              //const average = total / (employerRslts.rowCount * employerRslts.columnCount);\n              }\n            }\n          }\n        }\n  \n  \n        // Display the summary in a dialog box\n        await context.sync();\n        console.log(`The summary range address was ${employerRslts.address}.`);\n        console.log(`The ER CID was ${employerCID.values}.`);\n        //console.log(`rslt type 63: ${columnTotals[63]}`);\n        console.log(\"Column Totals:\");\n        Object.keys(columnTotals).forEach((rsltType) => {\n          console.log(`${rsltType}: ${columnTotals[rsltType]}`);\n        });\n        \n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Added 1/25/24\n  async function getPlanSummary() {\n    try {\n      await Excel.run(async (context) => {\n        // Get the selected range\n        let sheetER = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\")\n        let sheetFinRslt = context.workbook.worksheets.getItem(\"export_rp_financing_all\")\n        //const selectedRange = context.workbook.getSelectedRange();\n        const keyColumnIndex = 0;\n        const employerCID = sheetER.getRange(\"calpers_id\");\n        const employerRslts = sheetFinRslt.getRange(\"A5:NM3000\");\n        const employerRsltsKey = sheetFinRslt.getRange(\"A4:NM4\");\n        const finRsltCds = [63, 788];\n        ////////////////////////////////////////////////////////\n        ////////  Financing Result Codes: \n        ////////    63 - Total Active #\n        ////////    788 - Total Unique Retiree #\n        ////////////////////////////////////////////////////////\n  \n        // Load the values of the selected range\n        employerCID.load(\"values\");\n        employerRslts.load(\"address, columnCount, rowCount, values\");\n        employerRsltsKey.load(\"address, columnCount, rowCount, values\");\n  \n        // Run the queued commands to load values\n        await context.sync();\n  \n        // Calculate totals and averages\n        var rsltColumnIndex = 0\n        const values = employerRslts.values;\n  \n        // Create lists to store matching rows and columns to sum across\n        const matchingRows = [];\n        const matchingColumns = [];\n  \n        // Iterate through the rows and identify matching rows\n        const employerRows = {};\n        for (let row = 0; row < employerRslts.values.length; row++) {\n          const key = employerRslts.values[row][keyColumnIndex];\n          if (employerCID.values == key) {\n            matchingRows.push(row);\n            employerRows[employerRslts.values[row][2]] = employerRows[employerRslts.values[row][2]] || 0;\n          }\n        }\n  \n        // Iterate through the columns and identify matching columns\n        for (let col = 3; col < employerRslts.columnCount; col++) {\n          const header = employerRsltsKey.values[0][col];\n          if (finRsltCds.includes(header)) {\n            matchingColumns.push(col);\n          }\n        }\n  \n        // Create dictionaries to store totals and values for each column\n        const columnTotals = {};\n  \n        // Iterate only across the relevant portion of the result range for totals\n        for (const row of matchingRows) {\n          const employerVRP = Number(employerRslts.values[row][2]);\n          const rowValues = {};  // Nest within employerRows{}\n  \n          for (const col of matchingColumns) {\n            // Initialize total for the column if not already present\n            const rsltType = Number(employerRsltsKey.values[0][col]);\n            columnTotals[rsltType] = columnTotals[rsltType] || 0;\n            if (employerCID.values == employerRslts.values[row][keyColumnIndex]) {\n              const numericValue = Number(employerRslts.values[row][col]); //First column is indexed to 0\n              if (!isNaN(numericValue)) {\n                columnTotals[rsltType] += numericValue;\n                rowValues[rsltType] = numericValue;\n              //const average = total / (employerRslts.rowCount * employerRslts.columnCount);\n              }\n            }\n          }\n          employerRows[employerVRP] = rowValues;\n  \n        }\n  \n  \n        // Display the summary in a dialog box\n        await context.sync();\n        console.log(`The summary range address was ${employerRslts.address}.`);\n        console.log(`The ER CID was ${employerCID.values}.`);\n        //console.log(`rslt type 63: ${columnTotals[63]}`);\n        console.log(\"Column Totals:\");\n        Object.keys(columnTotals).forEach((rsltType) => {\n          console.log(`Fin Result ${rsltType} Total: ${columnTotals[rsltType]}`);\n        });\n        Object.keys(employerRows).forEach((key) => {\n          Object.keys(employerRows[key]).forEach((inner) => {\n            console.log(`VRP ${key}: Fin Result ${inner}: ${employerRows[key][inner]}`);\n          });\n        });\n        console.log(employerRows);\n        \n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Added 1/26/24\n  async function getAmortSummary() {\n    try {\n      await Excel.run(async (context) => {\n        // Get the selected range\n        let sheetCtrl = context.workbook.worksheets.getItem(\"control\")\n        let sheetER = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\")\n        let sheetFinRslt = context.workbook.worksheets.getItem(\"export_rp_financing_all\")\n        let sheetAmortRslt = context.workbook.worksheets.getItem(\"export_rp_amort_base_all\")\n        const keyColumnIndex = 0;  // Column from sheetFinRslt to lookup VRPs under an ER CID\n        const keyAmortColumnIndex = 0;  // Column from sheetFinRslt to lookup VRPs under an ER CID\n        const employerCID = sheetER.getRange(\"calpers_id\");\n        const discountRate = sheetCtrl.getRange(\"interest_rate\");\n        const payrollInflRate = sheetCtrl.getRange(\"payroll_growth\");\n        const finRslts = sheetFinRslt.getRange(\"A5:NM3000\");\n        const finAmortRows = sheetAmortRslt.getRange(\"C3:W30000\");\n        const finAmortRowsKey = sheetAmortRslt.getRange(\"C2:W2\");\n        const amortRows = {};\n  \n        ////////////////////////////////////////////////////////\n        ////////  Amort Base Columns: \n        ////////    Column C - VAL_RATE_PLAN_IDENTIFIER\n        ////////    Column D - VALUATION_YEAR_ID\n        ////////    Column E - AMORT_CAUSE_TYPE_CD\n        ////////    Column F - AMORT_DESC\n        ////////    Column G - AMORT_FUNDING_TYPE_CD\n        ////////    Column H - AMORT_PERIOD_TYPE_CD\n        ////////    Column I - INITIAL_VALUATION_YEAR_ID\n        ////////    Column J - INITIAL_AMORT_PERIOD\n        ////////    Column K - INITIAL_RAMP_PERIOD_YRS\n        ////////    Column L - INITIAL_AMT\n        ////////    Column M - AMORT_PERIOD\n        ////////    Column N - VAL_DATE_AMT\n        ////////    Column O - VAL_DATE1_AMT\n        ////////    Column P - VAL_DATE2_AMT\n        ////////    Column Q - VAL_DATE_PMT\n        ////////    Column R - VAL_DATE1_PMT\n        ////////    Column S - VAL_DATE2_PMT\n        ////////    Column T - PMT_PERCENT  // Can ignore?\n        ////////    Column U - RAMP_DIRECTION_TYPE_CD\n        ////////    Column V - RAMP_PCNT\n        ////////    Column W - RAMP_UP_ONLY_FLAG\n        ////////////////////////////////////////////////////////\n  \n        // Load the values of the selected range\n        employerCID.load(\"values\");\n        discountRate.load(\"values\");\n        payrollInflRate.load(\"values\");\n        finRslts.load(\"address, columnCount, rowCount, values\");\n        finAmortRows.load(\"address, columnCount, rowCount, values\");\n        finAmortRowsKey.load(\"address, columnCount, rowCount, values\");\n  \n        // Run the queued commands to load values\n        await context.sync();\n  \n        // Calculate totals and averages\n        var rsltColumnIndex = 0;\n        const values = finRslts.values;\n  \n        // Create lists to store matching rows and columns to sum across\n        const matchingRows = [];\n        const matchingColumns = [];\n  \n        // Iterate through fin result tab to find ER's plans\n        const employerRows = {};\n        for (let row = 0; row < finRslts.values.length; row++) {\n          const key = finRslts.values[row][keyColumnIndex];\n          if (employerCID.values == key) {\n            employerRows[finRslts.values[row][2]] = employerRows[finRslts.values[row][2]] || 0;\n            amortRows[finRslts.values[row][2]] = [];\n          }\n        }\n  \n        let employerPlans = [];\n        Object.keys(employerRows).forEach((key) => {\n          employerPlans.push(key);\n        })\n        \n  \n        // Iterate through the amort rows and identify ER's rows within the plans\n        for (let row = 0; row < finAmortRows.values.length; row++) {\n          const key = finAmortRows.values[row][keyAmortColumnIndex];\n          if (key in employerRows) {\n            matchingRows.push(row);\n          }\n        }\n  \n        // Iterate through the columns and identify matching columns\n        for (let col = 0; col < finAmortRows.columnCount; col++) {\n          const header = finAmortRowsKey.values[0][col];\n          // if (finRsltCds.includes(header)) {\n          matchingColumns.push(col);\n          // }\n        }\n  \n        // Create dictionaries to store totals and values for each column\n        const columnTotals = {};\n  \n        // Iterate only across the relevant portion of the result range for totals\n        for (const row of matchingRows) {\n          const employerVRP = Number(finAmortRows.values[row][0]);\n          const rowValues = {};  // Nest within employerRows{}\n  \n          for (const col of matchingColumns) {\n            // Initialize total for the column if not already present\n            const rsltType = finAmortRowsKey.values[0][col];\n            columnTotals[rsltType] = columnTotals[rsltType] || 0;\n            const numericValue = Number(finAmortRows.values[row][col]); //First column is indexed to 0\n            if (!isNaN(numericValue)) {\n              columnTotals[rsltType] += numericValue;\n            }\n            rowValues[rsltType] = finAmortRows.values[row][col];\n          }\n          amortRows[employerVRP].push(rowValues);\n        }\n  \n  \n        // Display the summary in a dialog box\n        await context.sync();\n        console.log(`The summary range address was ${finAmortRows.address}.`);\n        console.log(`The ER CID was ${employerCID.values}.`);\n        console.log(columnTotals);\n        console.log(amortRows);\n        const dRate = Number(discountRate.values[0]);\n        globalDRate = Number(dRate);\n        const pRate = Number(payrollInflRate.values[0]);\n        var amortSch = getAmortTotal(amortRows, dRate, pRate);\n        amortSch = getUpdSchedule(amortSch, dRate, pRate); // Checks for negative balances at the end of a schedule and simulates single year Fresh Start\n  \n        // Update the chart ///////////////////////////////////////////////////////////////////////////////////////////\n        console.log(\"The updated ER amort schedules are:\");\n        console.log(amortSch);\n        barChartUAL.data.splice(0); // Clear the data set first\n        let i = 0;\n        Object.keys(amortSch).forEach((key) => {\n          barChartUAL.addData(key, amortSch[key], globalChartBarColors[i % 7], globalChartBorderColors[i % 7]); // Currently set to cycle between 7 colors\n          i = i + 1;\n        })\n        barChartUALBalance.data.splice(0); // Clear the data set first\n        // Store balance data for use in fresh starts\n        i = 0;\n        Object.keys(amortSch).forEach((key) => {\n          barChartUALBalance.addBalanceData(key, amortSch[key], globalChartBarColors[i % 7], globalChartBorderColors[i % 7]); // Currently set to cycle between 7 colors\n          i = i + 1;\n        })\n        replaceCanvas(\"chartContainer1\",\"chartUAL\");\n        chart1.clearRect(0, 0, chart1Canvas.width, chart1Canvas.height);\n        renderUALChart(\"chartUAL\", barChartUAL.data);\n        barChartHypUAL.data.splice(0); // Clear the data set first\n        i = 0;\n        Object.keys(amortSch).forEach((key) => {\n          barChartHypUAL.addData(key, amortSch[key], globalChartBarColors[i % 7], globalChartBorderColors[i % 7]); // Currently set to cycle between 7 colors\n          i = i + 1;\n        })\n        replaceCanvas(\"chartContainer2\",\"chartHypUAL\");\n        chart2.clearRect(0, 0, chart2Canvas.width, chart2Canvas.height);    \n        renderUALChart(\"chartHypUAL\", barChartHypUAL.data);\n        \n        resetFSperiods();\n        // renderUALChart(\"chartHypUAL\", chart2.data);\n        // //chart2.update();\n        // //chart2.ctx.restore();\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Added 2/1/24  --  Array of specified length filled with 0's\n  function createProjArray(len) {\n    return new Array(len).fill(0);\n  }\n  \n  // Added 1/31/24\n  function getAmortTotal(amortRows, dRate, payInflRate) {\n    try {\n      ////////////////////////////////////////////////////////\n      ////////  Amort Base Columns: \n      ////////    Column C - VAL_RATE_PLAN_IDENTIFIER\n      ////////    Column D - VALUATION_YEAR_ID\n      ////////    Column E - AMORT_CAUSE_TYPE_CD\n      ////////    Column F - AMORT_DESC\n      ////////    Column G - AMORT_FUNDING_TYPE_CD\n      ////////    Column H - AMORT_PERIOD_TYPE_CD\n      ////////    Column I - INITIAL_VALUATION_YEAR_ID\n      ////////    Column J - INITIAL_AMORT_PERIOD\n      ////////    Column K - INITIAL_RAMP_PERIOD_YRS\n      ////////    Column L - INITIAL_AMT\n      ////////    Column M - AMORT_PERIOD\n      ////////    Column N - VAL_DATE_AMT\n      ////////    Column O - VAL_DATE1_AMT\n      ////////    Column P - VAL_DATE2_AMT\n      ////////    Column Q - VAL_DATE_PMT\n      ////////    Column R - VAL_DATE1_PMT\n      ////////    Column S - VAL_DATE2_PMT\n      ////////    Column T - PMT_PERCENT  // Can ignore?\n      ////////    Column U - RAMP_DIRECTION_TYPE_CD\n      ////////    Column V - RAMP_PCNT\n      ////////    Column W - RAMP_UP_ONLY_FLAG\n      ////////////////////////////////////////////////////////\n  \n  \n      // Create object for storing plan amort balances and payments\n      const plans = {};\n  \n      // Iterate only across the relevant portion of the result range for totals\n      Object.keys(amortRows).forEach((ratePlan) => {\n        var planDtls = {'Total Balance': createProjArray(30), 'Total Payments': createProjArray(30)};  \n        const amortList = amortRows[ratePlan];\n        //console.log(amortList);\n  \n        for (const j in amortList) {\n          // roll forward balance and payment across each amort row\n          const amortBase = amortList[j]\n          var baseDtls = {'Total Balance': createProjArray(30), 'Total Payments': createProjArray(30)};\n          for (let i = 0; i < Math.max(Number(amortBase['AMORT_PERIOD']), 0); i++) {\n            if (i == 0) {\n              baseDtls['Total Balance'][i] = amortBase['VAL_DATE2_AMT']; // Start at rate-setting year, NOT val date\n              baseDtls['Total Payments'][i] = amortBase['VAL_DATE2_PMT']; // Start at rate-setting year, NOT val date\n            } else {\n              var iPrime = dRate; // Default to level-dollar funding type\n              if (amortBase['AMORT_FUNDING_TYPE_CD'] == '002') { // Use level-percent of pay if applicable\n                iPrime = ((1 + dRate) / (1 + payInflRate)) - 1;\n              }\n              const numericValueBal = Math.round(Number(baseDtls['Total Balance'][i - 1]) * (1 + dRate) - Number(baseDtls['Total Payments'][i - 1]) * Math.pow(1 + dRate, 0.5));\n              const numericValuePmt = Math.round(dRSPmt(iPrime,Number(amortBase['INITIAL_AMORT_PERIOD']),Number(amortBase['AMORT_PERIOD']) - i,Number(amortBase['INITIAL_RAMP_PERIOD_YRS']),numericValueBal * Math.pow(1 + dRate, 0.5),Number(amortBase['RAMP_UP_ONLY_FLAG'])));\n              if (!isNaN(numericValueBal)) {\n                baseDtls['Total Balance'][i] = numericValueBal;\n              }\n              if (!isNaN(numericValuePmt)) {\n                baseDtls['Total Payments'][i] = numericValuePmt;\n              }\n            }\n            // Add on the base's amounts to the plans total for that year\n            planDtls['Total Balance'][i] += baseDtls['Total Balance'][i];\n            planDtls['Total Payments'][i] += baseDtls['Total Payments'][i];\n          }\n          //console.log(amortBase); // Uncomment for debugging\n          //console.log(baseDtls); // Uncomment for debugging\n        }\n        // Now that the plan is processed, store results before moving to next plan\n        // Still need to check if end of schedule needs altering for negative balance\n        plans[ratePlan] = plans[ratePlan] || planDtls;\n      });\n  \n  \n      // Display the summary in a dialog box\n      console.log(\"The original ER amort schedules are:\");\n      console.log(plans);\n      return plans;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Added 2/2/24\n  function getUpdSchedule(origSchedule, dRate, payInflRate) {\n    try {\n      // Iterate only across the relevant portion of the result range for totals\n      var amortSchedule = origSchedule;\n  \n      Object.keys(amortSchedule).forEach((ratePlan) => {\n        var planBalances = amortSchedule[ratePlan]['Total Balance'];\n        var planPayments = amortSchedule[ratePlan]['Total Payments'];\n  \n        // Start evaluation at index 1 (after rate-setting year) since payment for prior year has already been evaluated by financing\n        var setZero = false;\n        for (let i = 1; i < 30; i++) {\n          if (setZero) {\n            planBalances[i] = 0;\n            planPayments[i] = 0;\n          } else {\n            if (Number(planBalances[i]) < 0) {\n              planPayments[i-1] = Math.round(Number(planBalances[i-1]) * Math.pow(1 + dRate, 0.5));\n              planBalances[i] = 0;\n              planPayments[i] = 0;\n              setZero = true;\n            }\n          }\n        };\n        \n        // Now that the plan is processed, store results before moving to next plan\n        amortSchedule[ratePlan]['Total Balance'] = amortSchedule[ratePlan]['Total Balance'] || planBalances;\n        amortSchedule[ratePlan]['Total Payments'] = amortSchedule[ratePlan]['Total Payments'] || planPayments;\n      });\n  \n      // Display the summary in a dialog box\n      //console.log(\"The updated ER amort schedules are:\");\n      //console.log(amortSchedule);\n      return amortSchedule;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Added 2/13/24\n  function freshStartSchedule(begBalance, dRate, period) {\n    try {\n      var planBalances = createProjArray(30);\n      var planPayments = createProjArray(30);\n  \n      planBalances[0] = Number(begBalance);\n      planPayments[0] = Math.round(dRSPmt(Number(dRate), Number(period), Number(period), 1, Number(planBalances[0]) * Math.pow(1 + Number(dRate), 0.5), 0));\n  \n      // Start evaluation at index 1 (after rate-setting year)\n      // Iterate only across the relevant portion of the result range for totals\n      for (let i = 1; i < Number(period); i++) {\n        planBalances[i] = Math.round(Number(planBalances[i-1]) * (1 + dRate) - Number(planPayments[i-1]) * Math.pow(1 + dRate, 0.5));\n        planPayments[i] = Math.round(dRSPmt(Number(dRate),Number(period),Number(period) - i,1,planBalances[i] * Math.pow(1 + dRate, 0.5),0));\n      };\n  \n      return planPayments;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Function to get rate plan and FS period for simulation\n  async function inputFS(selectedPlan, selectedPeriod) {\n    try {\n  \n      // Get the selected values from the dropdowns asynchronously\n      //var selectedPlan = document.getElementById(\"dropdownPlanin\").value;\n      //var selectedPeriod = document.getElementById(\"dropdownPeriodin\").value;\n  \n      console.log(selectedPlan);\n      console.log(selectedPeriod);\n      // Start building the payment schedule\n      // Update the chart ///////////////////////////////////////////////////////////////////////////////////////////\n      for (let i = 0; i < barChartHypUAL[\"data\"].length; i++) {\n        if (barChartHypUAL[\"data\"][i][\"label\"] == selectedPlan) {\n          var hypArray = [];\n          // Assumes barChartUALBalance corresponds to same ordering as barChartHypUAL\n          hypArray = freshStartSchedule(Number(barChartUALBalance[\"data\"][i][\"data\"][0]), globalDRate, selectedPeriod); //Currently grabbing first payment, needs to grab beginning balance\n          barChartHypUAL[\"data\"][i][\"data\"].splice(0, 30);\n          barChartHypUAL[\"data\"][i][\"data\"].unshift(...hypArray);\n        }\n      }\n      //chart2.clearRect(0, 0, chart2Canvas.width, chart2Canvas.height);    \n      //renderUALChart(\"chartHypUAL\", barChartHypUAL.data);\n      window.chartHypUAL.update();\n\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n\n  function dropDPopulate(valueArray) {\n    var dropdownElement = document.getElementById(\"dropdownPlan\");\n    // Clear existing options\n    dropdownElement.innerHTML = \"\";\n    // Populate dropdown with options\n    for (let i = 0; i < valueArray.length; i++) {\n      var option = document.createElement(\"option\");\n      option.value = valueArray[i];\n      option.text = valueArray[i];\n      dropdownElement.appendChild(option);\n    }\n  }\n  \n  function getSelectedDropD(dropDown) {\n    return new Promise((resolve, reject) => {\n      // Assuming dropdown has an id attribute set to \"dropdown\"\n      var dropdownElement = document.getElementById(dropDown);\n  \n      // Check if the element is found\n      if (dropdownElement) {\n        // Get the selected value\n        var selectedValue = dropdownElement.value;\n  \n        // Resolve the promise with the selected value\n        resolve(selectedValue);\n      } else {\n        // Reject the promise with an error\n        reject(new Error(\"Dropdown element not found\"));\n      }\n    });\n  }\n\n  \n  // Brute force clear any charts in the container\n  function replaceCanvas(containerName, canvasName) {\n    const container = document.getElementById(containerName);\n    const oldCanvas = document.getElementById(canvasName);\n    container.removeChild(oldCanvas);\n \n    const newCanvas = document.createElement(\"canvas\");\n    newCanvas.id = canvasName\n    container.appendChild(newCanvas);\n \n  }\n\n\n\n  // Update FS panel with chart data\n  function populateFSPanel(oAgency) {\n\n    let tableBody = document.getElementById('FStableInput').getElementsByTagName('tbody')[0];\n    while(tableBody.rows.length > 0) tableBody.deleteRow(0);\n    let i=0;\n    for (let vrp = 0; vrp < oAgency.rateplans.length; vrp++)\n    {\n      var row = tableBody.insertRow(-1);\n      //row.style.background = globalChartBarColors[i];\n      var dropDownM = row.insertCell(-1);\n      dropDownM.innerHTML = `<select class=\"FSperiods\" id=\"dropdownPeriodin${i}\"><option value=0>Select from 1-20</option>${generateFSOptions()}</select>`;\n      var cellRiskP = row.insertCell(-1);\n      cellRiskP.innerHTML = oAgency.rateplans[vrp].Risk_Pool;\n      var cellPlanName = row.insertCell(-1);\n      cellPlanName.innerHTML = oAgency.rateplans[vrp].Rate_Plan_Name;\n      var cellPlanID = row.insertCell(-1);\n      cellPlanID.innerHTML = oAgency.rateplans[vrp].Rate_Plan_Id;\n      var check = row.insertCell(-1);\n      check.innerHTML = `<input type=\"checkbox\" class=\"FSapprove\" id=\"FSCheck${i}\">`;\n      var cellActuaryName = row.insertCell(-1);\n      cellActuaryName.innerHTML = oAgency.rateplans[vrp].Actuary_Name;\n      i = i + 1;\n    }\n  }\n\n  function generateFSOptions () {\n    let options = '';\n    for (let i = 1; i <= 20; i++) {\n      options += `<option value =\"${i}\">${i}</option>`;\n    }\n    return options;\n  }\n\n  function readFSPanel() {\n\n    var table = document.getElementById(\"FStableInput\").getElementsByTagName('tbody')[0];\n    for (var i = 0, row; row = table.rows[i]; i++) {\n      var e = document.getElementById(`dropdownPeriodin${i}`);\n      var FSper = Number(e.value);\n       var VRP = \"VRP \" + table.rows[i].cells[3].innerText;\n       if(FSper !=0){\n        inputFS(VRP, FSper);\n       }\n    }\n    \n  }\n\n  function resetFSperiods(){\n    var table = document.getElementById(\"FStableInput\").getElementsByTagName('tbody')[0];\n    for (var i = 0, row; row = table.rows[i]; i++) {\n      document.getElementById(`dropdownPeriodin${i}`).value = 0;\n    }\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n  // Added 1/29/24 ////////// DRS PAYMENT FUNCTIONS /////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n  function dRSPmt(rate, origPer, remPer, rampPer, presVal, rampFlag) {\n    try {\n      var annuityFactor = 0;\n      if (rampFlag == 0) {\n        annuityFactor = dRSPresVal(rate, origPer, remPer, rampPer, 1)\n        if (annuityFactor == 0) {\n          return 0;\n        } else {\n          return Math.min(rampPer, origPer - remPer + 1, Math.max(remPer, 0)) * (presVal / annuityFactor);\n        }\n      } else if (rampFlag == 1) {\n        for (let i = 1; i <= Math.max(1, rampPer + remPer - origPer); i++) {\n          var x = 1;\n          if ( i == 1) {\n            x = Math.min(rampPer, origPer - remPer + 1)\n          } \n          annuityFactor = annuityFactor + myPresVal(rate, remPer - i + 1, -1, 0, 1) * (Math.pow(1 + rate, 1 - i)) * x; //myPresVal\n        }\n        if (annuityFactor == 0) {\n          return 0;\n        } else {\n          return presVal / annuityFactor * Math.min(rampPer, origPer - remPer + 1);\n        }\n      } else {\n        return 0;\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  function dRSPresVal(rate, origPer, remPer, rampPer, pmt) {\n    try {\n      const step = Math.min(origPer - remPer, origPer - rampPer);\n      const numRampDowns = Math.min(rampPer, step, Math.max(remPer, 0));\n      const rampUp = myPresVal(rate, origPer - rampPer + 1, -1, 0, 1) * myPresVal(rate, Math.max(rampPer - step, 0), -1, 0, 1);\n      var rampDown = 0;\n      if (numRampDowns > 0) {\n        for(let i = 1; i <= numRampDowns; i++) {\n          rampDown = rampDown + myPresVal(rate, origPer - rampPer - step + i, -1, 0, 1);\n        }\n      }\n      return (rampUp + rampDown) * pmt;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  function myPresVal(rate, nPer, pmt, futVal, beg) {\n    try {\n      return -(pmt * (1 + rate * beg) * ((Math.pow(1 + rate, nPer) - 1) / rate) + futVal) * (1 / Math.pow(1 + rate, nPer))\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n","// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"/assets/icon_tab.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_2___ = new URL(\"./taskpane.js\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_3___ = new URL(\"/assets/icon_home.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_4___ = new URL(\"/assets/icon_sensitivity.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_5___ = new URL(\"/assets/icon_projections.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_6___ = new URL(\"/assets/icon_ual.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_7___ = new URL(\"../../assets/logo_ACTO.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_8___ = new URL(\"/assets/icon_calendar.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_9___ = new URL(\"/assets/icon_actNotes.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_10___ = new URL(\"/assets/icon_synchExl-JS.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_11___ = new URL(\"/assets/icon_themepaint.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_12___ = new URL(\"/assets/icon_exportData.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_13___ = new URL(\"/assets/icon_about.png\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar ___HTML_LOADER_REPLACEMENT_2___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_2___);\nvar ___HTML_LOADER_REPLACEMENT_3___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_3___);\nvar ___HTML_LOADER_REPLACEMENT_4___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_4___);\nvar ___HTML_LOADER_REPLACEMENT_5___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_5___);\nvar ___HTML_LOADER_REPLACEMENT_6___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_6___);\nvar ___HTML_LOADER_REPLACEMENT_7___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_7___);\nvar ___HTML_LOADER_REPLACEMENT_8___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_8___);\nvar ___HTML_LOADER_REPLACEMENT_9___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_9___);\nvar ___HTML_LOADER_REPLACEMENT_10___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_10___);\nvar ___HTML_LOADER_REPLACEMENT_11___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_11___);\nvar ___HTML_LOADER_REPLACEMENT_12___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_12___);\nvar ___HTML_LOADER_REPLACEMENT_13___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_13___);\nvar code = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title> Employer Pool Summary </title> <link rel=\\\"icon\\\" href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" rel=\\\"stylesheet\\\"/> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js\\\"><\" + \"/script> <\" + \"script defer=\\\"defer\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_2___ + \"\\\"><\" + \"/script> </head> <body> <main> <header class=\\\"header\\\"> <h3 id=\\\"idERname\\\"> Employer-Name</h3> <h5 id=\\\"idERcid\\\">123456789</h5> <h5 id=\\\"idVY\\\">YYYY</h5> </header> <div class=\\\"toptab\\\"> <button class=\\\"tablinks\\\" value=\\\"home-tab\\\"> Home <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_3___ + \"\\\" alt=\\\"Home\\\" width=\\\"25\\\" height=\\\"25\\\"> </button> <button class=\\\"tablinks\\\" value=\\\"Sensitivity-tab\\\"> Sensitivity <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_4___ + \"\\\" alt=\\\"Sensitivity Analysis\\\" width=\\\"25\\\" height=\\\"25\\\"> </button> <button class=\\\"tablinks\\\" value=\\\"Projections-tab\\\"> Projections <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_5___ + \"\\\" alt=\\\"Projected Contributions\\\" width=\\\"25\\\" height=\\\"25\\\"> </button> <button class=\\\"tablinks\\\" value=\\\"UAL-tab\\\"> UAL <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_6___ + \"\\\" alt=\\\"Unfunded Accrued Liability\\\" width=\\\"25\\\" height=\\\"25\\\"> </button> </div> <div class=\\\"content\\\"> <div class=\\\"tabcontent\\\" id=\\\"home-tab\\\"> <div id=\\\"idHomeHeader\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_7___ + \"\\\" width=\\\"250\\\" height=\\\"75\\\" alt=\\\"ACTO Logo\\\" title=\\\"ACTO-Logo\\\"/> </div> <ul class=\\\"home-carousel\\\"> <li class=\\\"carousel-item\\\"> <div class=\\\"logo-row\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_8___ + \"\\\" alt=\\\"Image 001\\\" width=\\\"50\\\" height=\\\"50\\\"/> </div> <div class=\\\"title-row\\\"> <h3> Important Dates</h3> </div> <div class=\\\"desc-row\\\"> <ul> <li> 4/30/24 : ADP inclusion deadline.</li> <li> 6/30/24 : Another deadline</li> <li> 6/30/24 : Some other deadline</li> </ul> </div> <div class=\\\"progress-row\\\"> <progress id=\\\"home_progbar\\\" max=\\\"100\\\" value=\\\"0\\\"></progress> </div> <div class=\\\"footer-row\\\" id=\\\"home_TimeDays\\\"> </div> </li> <li class=\\\"carousel-item\\\"> <div class=\\\"logo-row\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_9___ + \"\\\" alt=\\\"Image 001\\\" width=\\\"50\\\" height=\\\"50\\\"/> </div> <div class=\\\"title-row\\\"> <h3> Announcements</h3> </div> <div class=\\\"desc-row\\\"> <p> General announcements or reminders can be placed here. &#128204; Notes about pooled plan valuation checking. Location of other excel actuary tools to assist in checking pooled plans. </p> </div> <div class=\\\"footer-row\\\"> <p> - Technology Team </p> </div> </li> <li class=\\\"carousel-item\\\"> <div class=\\\"logo-row\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_10___ + \"\\\" alt=\\\"Image 001\\\" width=\\\"50\\\" height=\\\"50\\\"/> </div> <div class=\\\"title-row\\\"> <h3> Synchronize</h3> </div> <div class=\\\"desc-row\\\"> <p> The Excel Add-in will automatically reload its data after the Print Rate Plan Report Macro is completed. &#128226; There is no need to execute this function. Synchronizing will reload Office.initiliaze using the current RPID in the Excel workbook. </p> </div> <button id=\\\"reLoad\\\" title=\\\"Reload\\\" class=\\\"addOptions\\\"> &#127756; Synchronize </button> </li> <li class=\\\"carousel-item\\\"> <div class=\\\"logo-row\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_11___ + \"\\\" alt=\\\"Image 001\\\" width=\\\"50\\\" height=\\\"50\\\"/> </div> <div class=\\\"title-row\\\"> <h3> Color Theme </h3> </div> <div class=\\\"desc-row\\\"> <p> Change the color theme of the document. This alters all background, row selection, shading, and text colors. </p> </div> <select name=\\\"theme-select\\\" id=\\\"theme-select\\\" title=\\\"themeselection\\\"> <option selected=\\\"selected\\\" disabled=\\\"disabled\\\">&#128760; Theme </option> <option value=\\\"gray\\\">&#128125; GrayMa</option> <option value=\\\"pink\\\">&#128039; PinkYe</option> <option value=\\\"green\\\">&#129361; AvocAi</option> <option value=\\\"brown\\\">&#127849; DonuTo</option> <option value=\\\"black\\\">&#128060; PandSu</option> </select> </li> <li class=\\\"carousel-item\\\"> <div class=\\\"logo-row\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_12___ + \"\\\" alt=\\\"Image 001\\\" width=\\\"50\\\" height=\\\"50\\\"/> </div> <div class=\\\"title-row\\\"> <h3>Export Data</h3> </div> <div class=\\\"desc-row\\\"> <p> Transfer the aggregated information currently loaded to another file type. </p> </div> <button id=\\\"expExl\\\" title=\\\"ExportExcel\\\" class=\\\"addOptions\\\"> &#128215; Excel </button> <br> <button id=\\\"printPDF\\\" title=\\\"PrinttoPDF\\\" class=\\\"addOptions\\\"> &#128190; PDF </button> </li> <li class=\\\"carousel-item\\\"> <div class=\\\"logo-row\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_13___ + \"\\\" alt=\\\"Image 001\\\" width=\\\"50\\\" height=\\\"50\\\"/> </div> <div class=\\\"title-row\\\"> <h3> About</h3> </div> <div class=\\\"desc-row\\\"> <p> Office Add-in platform that aggregates employer information for pool plans by SuperPool in tandem with the Pool financing workbook. </p> </div> </li> </ul> </div> <div class=\\\"tabcontent\\\" id=\\\"Sensitivity-tab\\\"> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblDiscountSensitivity\\\">Discount Rate Sensitivity &plusmn; 1%</h3> <table id=\\\"idTblDiscountSensitivity\\\"> <thead> <tr> <th colspan=\\\"2\\\"> Scenario:</th> <th colspan=\\\"4\\\"> &#128201;Low</th> <th colspan=\\\"4\\\"> &#10059;Baseline </th> <th colspan=\\\"4\\\"> &#128200;High </th> </tr> <tr> <th>Plan Name</th> <th>VRP</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblInflationSensitivity\\\">Inflation Last Annual &plusmn; 1%</h3> <table id=\\\"idTblInflationSensitivity\\\"> <thead> <tr> <th colspan=\\\"2\\\"> Scenario:</th> <th colspan=\\\"4\\\"> &#128201;Low</th> <th colspan=\\\"4\\\"> &#10059;Baseline </th> <th colspan=\\\"4\\\"> &#128200;High </th> </tr> <tr> <th>Plan Name</th> <th>VRP</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblMortalitySensitivity\\\">Mortality Sensitivity &plusmn; 10%</h3> <table id=\\\"idTblMortalitySensitivity\\\"> <thead> <tr> <th colspan=\\\"2\\\"> Scenario:</th> <th colspan=\\\"4\\\"> &#128201;Low</th> <th colspan=\\\"4\\\"> &#10059;Baseline </th> <th colspan=\\\"4\\\"> &#128200;High </th> </tr> <tr> <th>Plan Name</th> <th>VRP</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>MVA / AL</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblMVA\\\">Assets</h3> <table id=\\\"idTblMVA\\\"> <thead> <tr> <th colspan=\\\"2\\\"></th> <th> </th> </tr> <tr> <th>Plan Name</th> <th>VRP</th> <th>MVA</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblmaturityMeasures\\\">Maturity Measures</h3> <table id=\\\"idTblmaturityMeasures\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>RET AL to Total AL Ratio</th> <th>ACT to Unique RET Ratio</th> <th>ACT Count</th> <th>RET Count</th> <th>Unique RET Count</th> <th>RET AL</th> <th>Total AL</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblHypotheticalTerm\\\"> Hypothetical Termination </h3> <table id=\\\"idTblHypotheticalTerm\\\"> <thead> <tr> <th colspan=\\\"2\\\"></th> <th colspan=\\\"3\\\">3.06 % </th> <th colspan=\\\"3\\\">5.06 % </th> </tr> <tr> <th>Plan Name</th> <th>VRP</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3 class=\\\"collapsibleTbl\\\" value=\\\"idTblLDROM\\\"> Low Default Risk Obligation Measure </h3> <table id=\\\"idTblLDROM\\\"> <thead> <tr> <th colspan=\\\"2\\\"></th> <th colspan=\\\"4\\\">Total AL</th> <th colspan=\\\"3\\\">Total</th> </tr> <tr> <th>Plan Name</th> <th>VRP</th> <th>ACT</th> <th>TRA</th> <th>SEP</th> <th>RET</th> <th>AL</th> <th>UAL</th> <th>Hyp Cost</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> </div> <div class=\\\"tabcontent\\\" id=\\\"Projections-tab\\\"> <h3 id=\\\"collapsibleProjTbls\\\">Projected Contributions</h3> <table id=\\\"idTblprojections0\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections1\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections2\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections3\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections4\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections5\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections6\\\"> <thead> <tr> <th>Plan Name</th> <th>VRP</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> </div> <div class=\\\"tabcontent\\\" id=\\\"UAL-tab\\\"> <h3>Combined UAL Schedule</h3> <div class=\\\"chart-container\\\" id=\\\"chartContainer1\\\"> <canvas id=\\\"chartUAL\\\"></canvas> </div> <br> <h3>Hypothetical UAL Schedule</h3> <div class=\\\"chart-container\\\" id=\\\"chartContainer2\\\"> <canvas id=\\\"chartHypUAL\\\"></canvas> </div> <div id=\\\"FSselection\\\"> <button id=\\\"buttonFreshStart\\\">Simulate Fresh Start</button> <button id=\\\"buttonResetFS\\\">Reset</button> <table id=\\\"FStableInput\\\"> <thead> <tr> <th>Fresh Start Period</th> <th>Risk Pool</th> <th>Plan Name</th> <th>VRP</th> <th></th> <th>Actuary</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> </div> </div> </div> </main> </body> <\" + \"script>let date2=new Date(\\\"06/30/2024\\\"),date1=new Date(Date.now()),Difference_In_Time=Math.round((date2.getTime()-date1.getTime())/864e5);document.getElementById(\\\"home_TimeDays\\\").innerHTML=\\\"Days left: \\\"+Difference_In_Time,document.getElementById(\\\"home_progbar\\\").value=100-Difference_In_Time/365*100;const setTheme=e=>document.documentElement.className=e;var tablink_a=document.getElementsByClassName(\\\"tablinks\\\"),table_a=document.getElementsByClassName(\\\"collapsibleTbl\\\");function openTab(e){var t,n,l;for(n=document.getElementsByClassName(\\\"tabcontent\\\"),l=document.getElementsByClassName(\\\"tablinks\\\"),t=0;t<n.length;t++)n[t].style.display=\\\"none\\\";for(t=0;t<l.length;t++)l[t].className=l[t].className.replace(\\\" active\\\",\\\"\\\");document.getElementById(e.currentTarget.getAttribute(\\\"value\\\")).style.display=\\\"block\\\",e.currentTarget.className+=\\\" active\\\"}function hideTable(e){var t=document.getElementById(e.currentTarget.getAttribute(\\\"value\\\")).style;\\\"none\\\"!=t.display?t.display=\\\"none\\\":t.removeProperty(\\\"display\\\")}function collapseProjTbl(e){var t=new Date(document.getElementById(\\\"idVY\\\").innerHTML).getFullYear(),n=document.getElementById(\\\"collapsibleProjTbls\\\");for(i=0;i<7;i++){if(tbl=document.getElementById(`idTblprojections${i}`),tbl.rows[tbl.rows.length-1].cells[0].innerHTML=\\\"06/30/\\\"+(t+i)+\\\" | \\\"+(t+i+2)+\\\"-\\\"+(t+i+3),\\\"Projected Contributions\\\"==n.innerHTML&&(tbl.rows[0].cells[0].innerHTML=\\\"Valuation Year\\\",tbl.rows[0].cells[1].innerHTML=\\\"Rate Setting Year\\\",tbl.getElementsByTagName(\\\"thead\\\")[0].style.display=\\\"none\\\",tbl.getElementsByTagName(\\\"tbody\\\")[0].style.display=\\\"none\\\",6==i))return document.getElementById(\\\"idTblprojections0\\\").getElementsByTagName(\\\"thead\\\")[0].style.removeProperty(\\\"display\\\"),void(n.innerHTML=\\\"Employer Projected Contributions\\\");if(\\\"Projected Contributions\\\"!=n.innerHTML&&(tbl.rows[0].cells[0].innerHTML=\\\"Plan Name\\\",tbl.rows[0].cells[1].innerHTML=\\\"VRP\\\",tbl.getElementsByTagName(\\\"thead\\\")[0].style.removeProperty(\\\"display\\\"),tbl.getElementsByTagName(\\\"tbody\\\")[0].style.removeProperty(\\\"display\\\"),6==i))return void(n.innerHTML=\\\"Projected Contributions\\\")}}document.getElementById(\\\"collapsibleProjTbls\\\").addEventListener(\\\"click\\\",collapseProjTbl,!1),document.getElementById(\\\"theme-select\\\").addEventListener(\\\"change\\\",(function(){setTheme(this.value)})),Array.from(tablink_a).forEach((function(e){e.addEventListener(\\\"click\\\",openTab,!1)})),Array.from(table_a).forEach((function(e){e.addEventListener(\\\"click\\\",hideTable,!1)}))<\" + \"/script> </html>\";\n// Exports\nexport default code;"],"names":["module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","value","Symbol","iterator","c","asyncIterator","u","toStringTag","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","args","arguments","apply","err","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","_toPrimitive","toPrimitive","Number","AgencyDetails","p_name","p_cid","cid","rateplans","allplanlist","data","row","VRP","ERName","RPName","CountyName","ActuaryName","RiskPoolID","CalPERSID","vrp","vrpname","actuaryname","riskpool","Rate_Plan_Id","Rate_Plan_Name","Actuary_Name","Risk_Pool","AssumptionDetails","p_vy","p_interest","p_salarygrowth","year","valuationyear","TableStructure","oAgency","oAssumptions","pTableNameID","pDataSource","aFieldCodes","aFormatCodes","aVisibilityCodes","aERTotalRowCodes","TableNameId","DataSource","FieldCodes","FormatCodes","VisibilityCodes","ERTotalRowCodes","FieldNames","ERTotalRowValues","SumTotalValues","VRPValues","getFieldNames","getVRPValues","getSumTotalvalues","getERTotalRowValues","_this","colMax","fincode","tmp_fieldname","col","_this2","rowMax","tmp_vrpvalues","RP_FinCode","RP_Value","fsum","retval","eval","val1","val2","indexOf","sum","onChange","_x2","_onChange","_callee3","event","_context3","Excel","run","_ref2","_callee2","context","_context2","sync","VRPTrigger","_x6","_x3","_VRPTrigger","_callee5","_context5","_ref3","_callee4","sheetER","vrpId","vrpRngLoc","_context4","workbook","worksheets","getItem","getRange","load","address","console","log","changeType","source","FetchExcelData","getAmortSummary","_x7","t0","_FetchExcelData","_callee7","_context7","_ref4","_callee6","sheetRPfinancingAll","sheetPostRPfinancing","sheetCalcsCurRP","sheetRPinfo","sheetControl","sheetPEPRAEe","exl_RPfinancingAll","exl_PostRPfinancing","exl_RPinfo","exl_PEPRAEe","exl_EmployerName","exl_CalpersId","exl_ValuationYear","exl_InterestRate","exl_PayrollGrowth","RPinfo","Agency","Assumptions","Data","_context6","getRatePlans","LoadInfoToDoc","SummaryTableControl","_x8","oAssum","getElementById","innerHTML","populateFSPanel","aData","DS0","oTable_MM","oTable_HT","oTable_DR","oTable_IL","oTable_MS","oTable_MVA","oTable_LDROM","oTable_P0","oTable_P1","oTable_P2","oTable_P3","oTable_P4","oTable_P5","oTable_P6","DataTableToHTML","oTable","tableBody","tableFoot","rows","deleteRow","insertRow","insertCell","fcode","cellVal","FormatVisible","result","toLocaleString","style","minimumFractionDigits","toFixed","rowF","cellER","colSpan","formatCode","cellf","Office","onReady","initialize","onclick","readFSPanel","_ref","_callee","_context","onChanged","add","_x","ChartDataUAL","plan","planAmortSch","planColor","planBorderColor","objData","label","backgroundColor","borderColor","barChartUAL","barChartUALBalance","barChartHypUAL","chart1Canvas","chart2Canvas","chart1","getContext","chart2","globalDRate","globalChartBarColors","globalChartBorderColors","renderUALChart","chartName","cDataSet","xValues","Chart","Legend","afterFit","height","chartUAL","labels","datasets","legend","scales","xAxes","stacked","yAxes","ticks","callback","index","tooltips","callbacks","tooltipItem","yLabel","chartHypUAL","getPoolSummary","_getPoolSummary","_callee9","_context9","_ref5","_callee8","sheetFinRslt","keyColumnIndex","employerCID","employerRslts","employerRsltsKey","finRsltCds","matchingRows","matchingColumns","header","columnTotals","_i","_matchingColumns","_col","rsltType","_iterator","_step","_row","numericValue","_context8","columnCount","includes","_createForOfIteratorHelper","_x9","getPlanSummary","_getPlanSummary","_callee11","_context11","_ref6","_callee10","employerRows","_i2","_matchingRows","_row2","employerVRP","rowValues","_iterator2","_step2","_col2","_context10","inner","_x10","_getAmortSummary","_callee13","_context13","_ref7","_callee12","sheetCtrl","sheetAmortRslt","keyAmortColumnIndex","discountRate","payrollInflRate","finRslts","finAmortRows","finAmortRowsKey","amortRows","employerPlans","_row3","_i3","_matchingRows2","_row4","_iterator3","_step3","_col3","dRate","pRate","amortSch","_context12","getUpdSchedule","getAmortTotal","splice","addData","addBalanceData","replaceCanvas","clearRect","width","resetFSperiods","_x11","createProjArray","len","Array","fill","payInflRate","plans","ratePlan","planDtls","amortList","j","amortBase","baseDtls","Math","max","iPrime","numericValueBal","round","pow","numericValuePmt","dRSPmt","origSchedule","amortSchedule","planBalances","planPayments","setZero","freshStartSchedule","begBalance","period","inputFS","_x4","_x5","_inputFS","_callee14","selectedPlan","selectedPeriod","_barChartHypUAL$data$","hypArray","_context14","unshift","_toConsumableArray","update","dropDPopulate","valueArray","dropdownElement","option","createElement","text","appendChild","getSelectedDropD","dropDown","containerName","canvasName","container","oldCanvas","removeChild","newCanvas","id","generateFSOptions","table","FSper","cells","innerText","rate","origPer","remPer","rampPer","presVal","rampFlag","annuityFactor","dRSPresVal","min","x","myPresVal","pmt","step","numRampDowns","rampUp","rampDown","nPer","futVal","beg","plugins","register","afterDatasetsDraw","chart","easing","ctx","grandTotal","labelIndex","total","highestIndex","dataset","datasetIndex","getDatasetMeta","hidden","xPos","_model","yPos","save","translate","rotate","PI","fillStyle","font","textAlign","fillText","toString","restore","textBaseline","___HTML_LOADER_IMPORT_0___","URL","___HTML_LOADER_IMPORT_1___","___HTML_LOADER_IMPORT_2___","___HTML_LOADER_IMPORT_3___","___HTML_LOADER_IMPORT_4___","___HTML_LOADER_IMPORT_5___","___HTML_LOADER_IMPORT_6___","___HTML_LOADER_IMPORT_7___","___HTML_LOADER_IMPORT_8___","___HTML_LOADER_IMPORT_9___","___HTML_LOADER_IMPORT_10___","___HTML_LOADER_IMPORT_11___","___HTML_LOADER_IMPORT_12___","___HTML_LOADER_IMPORT_13___"],"sourceRoot":""}