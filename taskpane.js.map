{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/compat get default export","webpack://excel-custom-functions-js/webpack/runtime/define property getters","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n\n\n  url = String(url.__esModule ? url.default : url);\n\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t41: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","\n/****************************************************************************************\n * \n *                --------- AgencyDetails Class ----------------\n *    Builds a single employer with its multiple rate plans associated with it.\n *    Column indexes correspond to the import_rate_plan_info range. \n * \n ****************************************************************************************/\n\nclass AgencyDetails{\n\n  constructor(p_name, p_cid){\n    this.name = p_name;\n    this.cid = p_cid;\n    this.rateplans = [];\n    this.allplanlist = [];\n  }\n  \n  getRatePlans(data){\n    for (let row = 0; row < data.length; row++){\n      if (row > 0 && data[row][0] !=\"\"){\n        this.allplanlist.push({\n          VRP: data[row][0],\n          ERName: data[row][1],\n          RPName: data[row][2],\n          CountyName: data[row][3],\n          ActuaryName: data[row][4],\n          RiskPoolID: data[row][5],\n          CalPERSID: data[row][6],\n        });\n      }\n\n\n        if (this.cid == data[row][6]) \n        {\n          vrp = data[row][0];\n          vrpname = data[row][2];\n          actuaryname = data[row][4];\n          riskpool = data[row][5];\n\n          this.rateplans.push({\n            Rate_Plan_Id : vrp,\n            Rate_Plan_Name : vrpname,\n            Actuary_Name : actuaryname,\n            Risk_Pool : riskpool\n          });\n        }\n    }\n\n  }\n\n}\n\n/****************************************************************************************\n * \n *                --------- AssumptionDetails Class ----------------\n *    Builds details about the assumption currently being used in the wb.\n *    parameters are coming from the control tab\n * \n ****************************************************************************************/\n\nclass AssumptionDetails{\n\n  constructor(p_vy, p_interest, p_salarygrowth){\n    this.year = p_vy;\n    this.valuationyear = \"06/30/\" + p_vy;\n    this.i = Number(p_interest);\n    this.s = Number(p_salarygrowth);\n  }\n\n}\n\n/****************************************************************************************\n * \n *                --------- TableStructure Class ----------------\n *   \n * \n ****************************************************************************************/\n\nclass TableStructure {\n\n  constructor(oAgency, oAssumptions, pTableNameID, pDataSource, aFieldCodes, aFormatCodes, aVisibilityCodes, aERTotalRowCodes){\n    this.TableNameId = pTableNameID;\n    this.DataSource = pDataSource;\n    this.FieldCodes = aFieldCodes;\n    this.FormatCodes = aFormatCodes;\n    this.VisibilityCodes = aVisibilityCodes;\n    this.ERTotalRowCodes = aERTotalRowCodes;\n    this.FieldNames = [];\n    this.ERTotalRowValues = [];\n    this.SumTotalValues = [];\n    this.VRPValues = [];\n    this.getFieldNames(oAgency);\n    this.getVRPValues(oAgency, oAssumptions);\n    this.getSumTotalvalues();\n    this.getERTotalRowValues();\n  }\n\n  getFieldNames(oAgency){\n    const colMax = this.DataSource[0].length;\n    this.FieldCodes.forEach(fincode =>{\n      let tmp_fieldname = fincode;\n      for ( let col = 0; col < colMax; col++){\n        if (fincode == this.DataSource[1][col]){  //assumes the fin code row is the second row in the range. ok for now, may need to param\n          tmp_fieldname = this.DataSource[0][col];\n          break;\n        }\n      }\n    this.FieldNames.push(tmp_fieldname);\n    });\n  }\n\n  getVRPValues(oAgency, oAssumptions){\n\n    const rowMax = this.DataSource.length;\n    const colMax = this.DataSource[0].length;\n\n    this.FieldCodes.forEach(fincode =>{\n      let tmp_vrpvalues = [];\n      Object.keys(oAgency.rateplans).forEach(key => {\n        let vrp = oAgency.rateplans[key].Rate_Plan_Id;\n        for (let row = 0; row < rowMax; row++) {\n          if (vrp == this.DataSource[row][2]) {     //assumes the vrp list column is the 3rd column of the range. ok for now, may need to param\n            for ( let col = 0; col < colMax; col++){\n              if (fincode == this.DataSource[1][col]){   //assumes the fin code row is the second row in the range. ok for now, may need to param\n                tmp_vrpvalues.push({ Rate_Plan_Id : vrp, RP_FinCode : fincode, RP_Value : this.DataSource[row][col]});\n              }\n            }\n          }\n        }\n      });\n      if (!tmp_vrpvalues.length){ //handles if no fincode is matched\n        Object.keys(oAgency.rateplans).forEach(key => {\n        tmp_vrpvalues.push({ Rate_Plan_Id : 0, RP_FinCode : 0, RP_Value : 0});\n        });\n      };  \n      this.VRPValues.push(tmp_vrpvalues);\n    });\n\n  }\n\n  getSumTotalvalues(){\n\n    for( let f = 0; f < this.FieldCodes.length; f++){\n      let fsum = 0;\n      for( let v = 0; v < this.VRPValues[0].length; v++){\n        fsum = fsum + Number(this.VRPValues[f][v].RP_Value);\n      }\n      this.SumTotalValues.push(fsum);\n    }\n\n  }\n\n  getERTotalRowValues(){\n\n    for( let f = 0; f < this.FieldCodes.length; f++){\n      if (this.ERTotalRowCodes[f] == \"SUM\" ){\n        this.ERTotalRowValues.push(this.SumTotalValues[f]);\n      }\n      else if (this.ERTotalRowCodes[f] == \"N/A\" ){\n        this.ERTotalRowValues.push(\"N/A\");\n      }\n      else if (this.ERTotalRowCodes[f] == \"NULL\" ){\n        this.ERTotalRowValues.push(\"\");\n      }\n      else{\n        retval = eval(this.ERTotalRowCodes[f]);\n        this.ERTotalRowValues.push(retval);\n        this.SumTotalValues[f] = retval;    //the ERTotal and SUMTotal will be the same\n      }\n    }\n  }\n\n  RatioOfSums(val1, val2){ \n    if(this.SumTotalValues[this.FieldNames.indexOf(val2)] == 0 || this.SumTotalValues[this.FieldNames.indexOf(val2)] == \"\")\n    {return 0}\n    return this.SumTotalValues[this.FieldNames.indexOf(val1)] / this.SumTotalValues[this.FieldNames.indexOf(val2)];\n  }\n\n  SumOfTotals(val1, val2){ \n    return this.SumTotalValues[this.FieldNames.indexOf(val1)] + this.SumTotalValues[this.FieldNames.indexOf(val2)];\n  }  \n\n  SumOfProducts(val1, val2){\n\n    let sum = 0;\n    for(let v = 0; v < this.VRPValues[0].length; v++)\n    {\n      sum = sum + (this.VRPValues[this.FieldNames.indexOf(val1)][v].RP_Value * this.VRPValues[this.FieldNames.indexOf(val2)][v].RP_Value);\n    }\n    return sum;\n\n  }\n  \n}\n\n/****************************************************************************************\n * \n *                --------- Office OnReady! ----------------\n *    Main Point of entry. \n * \n ****************************************************************************************/\n\nOffice.onReady(() =>{\n\n  document.getElementById(\"buttonFreshStart\").onclick = runApp;\n  \n});\n\nOffice.initialize = () => {\n  // Add the event handler.\n  Excel.run(async context => {\n    let sheet = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\");\n    sheet.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the onChanged event.\");\n  });\n};\n\n/**\n * Handle the changed event from the worksheet.\n *\n * @param event The event information from Excel\n */\nasync function onChange(event) {\n    await Excel.run(async (context) => {    \n        await context.sync();\n        VRPTrigger(event);\n  });\n}\n\n/****************************************************************************************\n * \n *                --------- VRPTrigger ----------------\n *    Catches the event in which the rpid named range in excel has changed.\n *    If triggred then initiates other functions to begin\n *    This is where other calls can be initiated\n * \n ****************************************************************************************/\n\nasync function VRPTrigger(event) {\n\n  await Excel.run(async (context) => {\n\n  const sheetER = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\");\n\n  const vrpId = sheetER.getRange(\"rpid\");\n\n  vrpId.load(\"address, values\");\n\n  await context.sync();    \n  \n  // get VRP location in workbook\n  const vrpRngLoc = vrpId.address.slice(vrpId.address.indexOf(\"!\") + 1);\n\n  if (event.address == vrpRngLoc )\n  {\n      console.log(`Event: Cell-Address: ${event.address}  Type: ${event.changeType}  Source: ${event.source}`)     \n      FetchExcelData();\n      getAmortSummary();\n  }\n  \n  })\n}\n\n/****************************************************************************************\n * \n *                --------- FetchExcelData ----------------\n *    Will read data from excel and load it. After loading the data, the process of\n *    building the content begins.\n *    ?? reconsider loading data only on workbook open? rather refreshing every VRPtrigger?\n * \n ****************************************************************************************/\n\nasync function FetchExcelData(){\n  \n  await Excel.run(async (context) => {\n\n    const sheetRPfinancingAll = context.workbook.worksheets.getItem(\"export_rp_financing_all\");\n    const sheetPostRPfinancing = context.workbook.worksheets.getItem(\"export_post_rp_financing\");\n    const sheetCalcsCurRP = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\");\n    const sheetRPinfo = context.workbook.worksheets.getItem(\"import_rate_plan_info\");\n    const sheetControl = context.workbook.worksheets.getItem(\"control\");\n    const sheetPEPRAEe = context.workbook.worksheets.getItem(\"PEPRA_EE_Rates\");\n\n    const exl_RPfinancingAll = sheetRPfinancingAll.getRange(\"A3:NM3000\");\n    const exl_PostRPfinancing = sheetPostRPfinancing.getRange(\"A3:N3000\");\n    const exl_RPinfo = sheetRPinfo.getRange(\"B2:I3000\");\n    const exl_PEPRAEe = sheetPEPRAEe.getRange(\"B3:M50\"); \n\n    const exl_EmployerName = sheetCalcsCurRP.getRange(\"org\");\n    const exl_CalpersId = sheetCalcsCurRP.getRange(\"calpers_id\");\n\n    const exl_ValuationYear = sheetControl.getRange(\"current_year\");\n    const exl_InterestRate = sheetControl.getRange(\"interest_rate\");\n    const exl_PayrollGrowth = sheetControl.getRange(\"payroll_growth\");\n\n    //Financial Data\n    exl_RPfinancingAll.load(\"address, columnCount, rowCount, values\");\n    exl_PostRPfinancing.load(\"address, columnCount, rowCount, values\");\n    exl_RPinfo.load(\"address, columnCount, rowCount, values\");\n    exl_PEPRAEe.load(\"address, columnCount, rowCount, values\");\n\n    //Employer Details\n    exl_EmployerName.load(\"values\");\n    exl_CalpersId.load(\"values\");\n\n    //assumptions\n    exl_ValuationYear.load(\"values\");\n    exl_InterestRate.load(\"values\");\n    exl_PayrollGrowth.load(\"values\");\n\n  await context.sync();  \n\n    //build AgencyDetail class\n    const RPinfo = exl_RPinfo.values;\n    const Agency = new AgencyDetails(exl_EmployerName.values, exl_CalpersId.values);\n    Agency.getRatePlans(RPinfo);\n    \n   //override instance\n\n    //build AssumptionDetails class\n    const Assumptions = new AssumptionDetails(exl_ValuationYear.values, exl_InterestRate.values, exl_PayrollGrowth.values)\n    \n    // All financial data placed in array\n    const Data = [exl_RPfinancingAll.values, exl_PostRPfinancing.values, exl_PEPRAEe.values];\n\n      console.log(`The employer currently loaded is: ${Agency.name} - CID: ${Agency.cid} `) ;\n      console.log(\"The associated rate plans are:\"); console.log(Agency.rateplans);\n      console.log(`The current Assumptions for Valuation Year: ${Assumptions.valuationyear} - Interest Rate: ${Assumptions.i} - Salary Growth Rate: ${Assumptions.s}`) ;\n\n      LoadInfoToDoc(Agency, Assumptions, RPinfo);\n\n      SummaryTableControl(Agency, Assumptions, Data)\n  });\n\n}\n\n/****************************************************************************************\n * \n *                --------- LoadInfoToDoc ----------------\n *    Transfers over agency and assumptions to the html page  \n * \n ****************************************************************************************/\n\nfunction LoadInfoToDoc(oAgency, oAssum){\n    \n  document.getElementById(\"idERname\").innerHTML = oAgency.name;\n  document.getElementById(\"idERcid\").innerHTML = oAgency.cid;\n  document.getElementById(\"idVY\").innerHTML = oAssum.valuationyear;\n\n  //document.querySelector('select').value = null;\n\n  let optionVRP = document.getElementById('dropdownPlanin');\n  let optionFSperiod = document.getElementById('dropdownPeriodin');\n\n  var sz = optionVRP.options.length;\n  for ( let i =0; i< sz; i++){\n    optionVRP.options[0].remove();  \n  }\n  var sz = optionFSperiod.options.length;\n  for ( let i =0; i< sz; i++){\n    optionFSperiod.options[0].remove();  \n  }\n\n  Object.keys(oAgency.rateplans).forEach(key => { \n    var optVRP = document.createElement('option');\n    optVRP.value = oAgency.rateplans[key].Rate_Plan_Id;\n    optVRP.innerHTML =  oAgency.rateplans[key].Rate_Plan_Id + \" - \" + oAgency.rateplans[key].Rate_Plan_Name + \" - \" + oAgency.rateplans[key].Risk_Pool ;\n    optionVRP.appendChild(optVRP);\n  });\n\n  for (let i = 1; i <= 20; i++) {\n    var oprPer = document.createElement('option');\n    oprPer.value = i;\n    oprPer.innerHTML = i + \" Year(s)\";\n    optionFSperiod.appendChild(oprPer);\n  }\n  optionFSperiod.selectedIndex = 14;  //default 0indexed 15yr FS period \n\n}\n\n/****************************************************************************************\n * \n *                --------- SummaryTableControl ----------------\n *    This initiates the build for all tables along with its desired behavior and \n *    description of what the table is.  The common structure is that the first columns \n *    are the plan name and vrp id fields from the agency object. The common table has VRPs for \n *    its rows and the financial data as its fields(columns).\n * \n ****************************************************************************************/\n\nfunction SummaryTableControl(oAgency, oAssumptions, aData){\n\n  //Break the array of Data.   DataSets\n  const DS0 = aData[0];     //export_rp_financing_all\n  const DS1 = aData[1];     //export_post_rp_financing\n  const DS2 = aData[2];     //PEPRA_EE_Rates\n\n  /* Format Codes\n  #1 - Number with commas\n  #2 - Percent rounded to 2 decimal\n  #3 - number rounded to 2 decimal\n  #4 - No formating\n  */\n\n   /* Visbility Codes\n  #0 - Dont display VRP rows.  Total bottom row will still display\n  #1 - Display\n  */\n\n   /* ER Total Codes\n  N/A - Not Applicable\n  SUM - Straight sum of field\n  NULL - empty\n  RatioOfSums(v1,v2) - stringliteral evaluation. Ratio of field sums v1, v2\n  SumOfProducts(v1,v2) - stringliteral evaluation. sum of product of vrp level value v1, v2\n  SumOfTotals(v1,v2) - stringliteral evaluation. sum of field sums v1, v2\n  */\n\n  // **** -- Sensitivity Analysis Tables -- *****\n\n    // --- Maturity Measures ---\n    const TableNameID_MM = \"idTblmaturityMeasures\";\n    const DataSource_MM = DS0;\n    const FieldCodes_MM = [786,787,63,66,788,14,16];\n    const FormatCodes_MM = [3,3,1,1,1,1,1];\n    const VisibilityCodes_MM = [1,1,1,1,1,1,1];\n    const ERTotalRowCodes_MM = [\"this.RatioOfSums('AL Status 5', 'AL Total')\",\"this.RatioOfSums('# Stat 1', 'Unique Retiree Count')\",\"SUM\",\"SUM\",\"SUM\",\"SUM\",\"SUM\"];\n\n    const oTable_MM = new TableStructure(oAgency, oAssumptions, TableNameID_MM, DataSource_MM, FieldCodes_MM, FormatCodes_MM, VisibilityCodes_MM, ERTotalRowCodes_MM)\n\n    // --- Hypothetical Termination ---\n    const TableNameID_HT = \"idTblHypotheticalTerm\";\n    const DataSource_HT = DS0;\n    const FieldCodes_HT = [689,690,691,692,693,694];;\n    const FormatCodes_HT = [1,1,2,1,1,2];\n    const VisibilityCodes_HT = [1,1,1,1,1,1];\n    const ERTotalRowCodes_HT = [\"SUM\",\"SUM\",\"1-this.RatioOfSums('Term - Low UAL', 'Term - Low AL Total')\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('Term - High UAL', 'Term - High AL Total')\"];\n\n    const oTable_HT = new TableStructure(oAgency, oAssumptions, TableNameID_HT, DataSource_HT, FieldCodes_HT, FormatCodes_HT, VisibilityCodes_HT, ERTotalRowCodes_HT);   \n\n    // --- Discount Rate Sensitivity ---\n    const TableNameID_DR = \"idTblDiscountSensitivity\";\n    const DataSource_DR = DS0;\n    const FieldCodes_DR = [626,627,766,767,760,761,615,616,628,629,768,769];\n    const FormatCodes_DR = [2,1,1,2,2,1,1,2,2,1,1,2];\n    const VisibilityCodes_DR = [1,1,1,1,1,1,1,1,1,1,1,1];\n    const ERTotalRowCodes_DR = [\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('-1% UAL Total', '-1% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('UAL(AL-MVA)', '0% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('+1% UAL Total', '+1% AL')\"];\n\n    const oTable_DR = new TableStructure(oAgency, oAssumptions, TableNameID_DR, DataSource_DR, FieldCodes_DR, FormatCodes_DR, VisibilityCodes_DR, ERTotalRowCodes_DR);  \n\n    // --- Inflation Last Annual Sensitivity ---\n    const TableNameID_IL = \"idTblInflationSensitivity\";\n    const DataSource_IL = DS0;\n    const FieldCodes_IL = [770,771,772,773,760,761,615,616,774,775,776,777];\n    const FormatCodes_IL = [2,1,1,2,2,1,1,2,2,1,1,2];\n    const VisibilityCodes_IL = [1,1,1,1,1,1,1,1,1,1,1,1];\n    const ERTotalRowCodes_IL= [\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('-1% UAL Total', '-1% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('UAL(AL-MVA)', '0% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('+1% UAL Total', '+1% AL')\"];\n\n    const oTable_IL = new TableStructure(oAgency, oAssumptions, TableNameID_IL, DataSource_IL, FieldCodes_IL, FormatCodes_IL, VisibilityCodes_IL, ERTotalRowCodes_IL);  \n\n    // --- Mortality Sensitivity ---\n    const TableNameID_MS = \"idTblMortalitySensitivity\";\n    const DataSource_MS  = DS0;\n    const FieldCodes_MS  = [778,779,780,781,760,761,615,616,782,783,784,785];\n    const FormatCodes_MS  = [2,1,1,2,2,1,1,2,2,1,1,2];\n    const VisibilityCodes_MS  = [1,1,1,1,1,1,1,1,1,1,1,1];\n    const ERTotalRowCodes_MS = [\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('-10% UAL Total', '-10% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('UAL(AL-MVA)', '0% AL')\",\"NULL\",\"SUM\",\"SUM\",\"1-this.RatioOfSums('+10% UAL Total', '+10% AL')\"];\n\n    const oTable_MS  = new TableStructure(oAgency, oAssumptions, TableNameID_MS, DataSource_MS, FieldCodes_MS, FormatCodes_MS, VisibilityCodes_MS, ERTotalRowCodes_MS);    \n\n  // **** -- Projected Contributions Tables -- ***** \n  \n    // --- Projections 0 ---\n    const TableNameID_P0 = \"idTblprojections\";\n    const DataSource_P0  = DS0;\n    const FieldCodes_P0 = [2801,718, 717,636,707,'X'];\n    const FormatCodes_P0  = [1,1,1,2,2,2];\n    const VisibilityCodes_P0  = [1,1,1,1,1,0];\n    const ERTotalRowCodes_P0 = [\"SUM\",\"SUM\",\"SUM\",\"this.RatioOfSums('UAL Payment $','Payroll Projection Yr 3')\",`this.RatioOfSums(\"Plan's Net ER NC $\",\"Payroll Projection Yr 3\")`, `this.SumOfTotals(\"Plan's Net ER NC %\",\"UAL% 50-1\")`];\n\n    const oTable_P0  = new TableStructure(oAgency, oAssumptions, TableNameID_P0, DataSource_P0, FieldCodes_P0, FormatCodes_P0, VisibilityCodes_P0, ERTotalRowCodes_P0);    \n    \n    // --- Projections 1 ---\n    const TableNameID_P1 = \"idTblprojections1\";\n    const DataSource_P1  = DS0;\n    const FieldCodes_P1 = [2802,631, 'X', 637, 731, 'Y']; \n    const FormatCodes_P1  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P1  = [1,1,0,1,1,0];\n    const ERTotalRowCodes_P1 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 4','NC% 50-2')\",\"this.RatioOfSums('UAL$ 50-1','Payroll Projection Yr 4')\", \"this.RatioOfSums('X','Payroll Projection Yr 4')\", `this.SumOfTotals(\"UAL% 50-2\",\"NC% 50-2\")`];\n\n    const oTable_P1  = new TableStructure(oAgency, oAssumptions, TableNameID_P1, DataSource_P1, FieldCodes_P1, FormatCodes_P1, VisibilityCodes_P1, ERTotalRowCodes_P1);    \n    \n    // --- Projections 2 ---\n    const TableNameID_P2 = \"idTblprojections2\";\n    const DataSource_P2  = DS0;\n    const FieldCodes_P2 = [2803,632, 'X', 638, 732, 'Y']; \n    const FormatCodes_P2  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P2  = [1,1,0,1,1,0];\n    const ERTotalRowCodes_P2 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 5','NC% 50-3')\",\"this.RatioOfSums('UAL$ 50-2','Payroll Projection Yr 5')\", \"this.RatioOfSums('X','Payroll Projection Yr 5')\", `this.SumOfTotals(\"UAL% 50-3\",\"NC% 50-3\")`];\n\n    const oTable_P2  = new TableStructure(oAgency, oAssumptions, TableNameID_P2, DataSource_P2, FieldCodes_P2, FormatCodes_P2, VisibilityCodes_P2, ERTotalRowCodes_P2);    \n\n    // --- Projections 3 ---\n    const TableNameID_P3 = \"idTblprojections3\";\n    const DataSource_P3  = DS0;\n    const FieldCodes_P3 = [2804,633, 'X', 639, 733, 'Y']; \n    const FormatCodes_P3  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P3  = [1,1,0,1,1,0];\n    const ERTotalRowCodes_P3 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 6','NC% 50-4')\",\"this.RatioOfSums('UAL$ 50-3','Payroll Projection Yr 6')\", \"this.RatioOfSums('X','Payroll Projection Yr 6')\", `this.SumOfTotals(\"UAL% 50-4\",\"NC% 50-4\")`];\n\n    const oTable_P3  = new TableStructure(oAgency, oAssumptions, TableNameID_P3, DataSource_P3, FieldCodes_P3, FormatCodes_P3, VisibilityCodes_P3, ERTotalRowCodes_P3);    \n\n    // --- Projections 4 ---\n    const TableNameID_P4 = \"idTblprojections4\";\n    const DataSource_P4  = DS0;\n    const FieldCodes_P4 = [2805,634, 'X', 640, 734, 'Y']; \n    const FormatCodes_P4  = [1,1,1,2,2,2,2];\n    const VisibilityCodes_P4  = [1,1,0,1,1,0];\n    const ERTotalRowCodes_P4 = [\"SUM\",\"SUM\",\"this.SumOfProducts('Payroll Projection Yr 7','NC% 50-5')\",\"this.RatioOfSums('UAL$ 50-4','Payroll Projection Yr 7')\", \"this.RatioOfSums('X','Payroll Projection Yr 7')\", `this.SumOfTotals(\"UAL% 50-5\",\"NC% 50-5\")`];\n\n    const oTable_P4  = new TableStructure(oAgency, oAssumptions, TableNameID_P4, DataSource_P4, FieldCodes_P4, FormatCodes_P4, VisibilityCodes_P4, ERTotalRowCodes_P4);    \n\n  DataTableToHTML(oTable_MM, oAgency);\n  DataTableToHTML(oTable_HT, oAgency);\n  DataTableToHTML(oTable_DR, oAgency);\n  DataTableToHTML(oTable_IL, oAgency);\n  DataTableToHTML(oTable_MS, oAgency);\n  DataTableToHTML(oTable_P0, oAgency);\n  DataTableToHTML(oTable_P1, oAgency);\n  DataTableToHTML(oTable_P2, oAgency);\n  DataTableToHTML(oTable_P3, oAgency);\n  DataTableToHTML(oTable_P4, oAgency);\n\n}\n\n/****************************************************************************************\n * \n *                --------- DataTableToHTML ----------------\n *    Transfers the table structure into a table in the HTML document.\n *    Formats and appends the the rateplanname and VRPid to the first 2 cols.\n * \n ****************************************************************************************/\n\nfunction DataTableToHTML(oTable, oAgency){\n\n  let tableBody = document.getElementById(oTable.TableNameId).getElementsByTagName('tbody')[0];\n  let tableFoot= document.getElementById(oTable.TableNameId).getElementsByTagName('tfoot')[0];\n  while(tableBody.rows.length > 0) tableBody.deleteRow(0);\n  while(tableFoot.rows.length > 0) tableFoot.deleteRow(0);\n\n  for (let vrp = 0; vrp < oAgency.rateplans.length; vrp++)\n  {\n    var row = tableBody.insertRow(-1);\n\n    var cellPlanName = row.insertCell(-1);\n    cellPlanName.innerHTML = oAgency.rateplans[vrp].Rate_Plan_Name;\n    var cellPlanID = row.insertCell(-1);\n    cellPlanID.innerHTML = oAgency.rateplans[vrp].Rate_Plan_Id;\n\n    for(let fcode = 0; fcode < oTable.FieldCodes.length; fcode++) \n    {\n      var cellVal = row.insertCell(-1);\n\n      let formatCode = Number(oTable.FormatCodes[fcode]);\n      let visibleCode = Number(oTable.VisibilityCodes[fcode]);\n\n      let FormatVisible = formatCode * visibleCode;\n\n      var result = oTable.VRPValues[fcode][vrp].RP_Value;\n      cellVal.innerHTML = result;\n\n      switch (FormatVisible){\n        case 0:\n          cellVal.innerHTML = \"\";\n          break;\n        case 1:\n          cellVal.innerHTML = result.toLocaleString(\"en-US\");\n          break;\n        case 2:\n          cellVal.innerHTML = Number(result).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2}); \n          break;\n        case 3:\n          if ( result != \"\" ){\n            cellVal.innerHTML = Number(result).toFixed(2);\n          }\n          else{\n            cellVal.innerHTML = \"N/A\";\n          }\n          break;\n        case 4:\n          cellVal.innerHTML = result; \n          break;\n      }\n\n    }\n  }\n\n  var rowF = tableFoot.insertRow(-1);\n  let cellER = rowF.insertCell(-1);\n  cellER.colSpan = \"2\";\n  cellER.innerHTML = \"Employer Total:\"\n\n  for(let fcode = 0; fcode < oTable.FieldCodes.length; fcode++) \n  {\n\n    let formatCode = Number(oTable.FormatCodes[fcode]);\n    let result = oTable.ERTotalRowValues[fcode]\n    let cellf = rowF.insertCell(-1);\n\n    switch (formatCode){\n      case 0:\n        cellf.innerHTML = result;\n        break;\n      case 1:\n        if ( result != \"\" ){\n          result = Number(result).toFixed(0);\n          cellf.innerHTML = Number(result).toLocaleString(\"en-US\");\n        }\n        else{\n          cellf.innerHTML = \"N/A\";\n        }\n        break;\n      case 2:\n        if ( result != \"\" ){\n        cellf.innerHTML = Number(result).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2}); \n        }\n        else{\n          cellf.innerHTML = \"N/A\";\n        }      \n        break;\n      case 3:\n        if ( result != \"\" ){\n          cellf.innerHTML = Number(result).toFixed(2);\n        }\n        else{\n          cellf.innerHTML = \"N/A\";\n        }\n        break;\n      case 4:\n        cellf.innerHTML = result; \n        break; \n    }\n  }\n\n}\n\n\n/****************************************************************************************\n * \n *                --------- Amort Code ----------------\n * \n ****************************************************************************************/\n\n\n// BarChartData class definition\n//const globalDataUAL = {\n  class ChartDataUAL {\n    constructor() {\n      this.data = [];\n    }\n    // Method to append new datasets\n    addData(plan, planAmortSch, planColor, planBorderColor) {\n      var objData = {\n        label: \"VRP \" + plan,\n        data: planAmortSch[\"Total Payments\"].slice(),\n        backgroundColor: planColor,\n        borderColor: planBorderColor\n      };\n    \n      this.data.push(objData);\n      console.log('UAL data has been appended')\n    }\n    addBalanceData(plan, planAmortSch, planColor, planBorderColor) {\n      var objData = {\n        label: \"VRP \" + plan,\n        data: planAmortSch[\"Total Balance\"].slice(),\n        backgroundColor: planColor,\n        borderColor: planBorderColor\n      };\n    \n      this.data.push(objData);\n      console.log('UAL data has been appended')\n    }\n  };\n  \n  // Global variables for two instances of UAL bar chart data\n  let barChartUAL = new ChartDataUAL;\n  let barChartUALBalance = new ChartDataUAL;\n  let barChartHypUAL = new ChartDataUAL;\n  var chart1Canvas = document.getElementById(\"chartUAL\");\n  var chart2Canvas = document.getElementById(\"chartHypUAL\");\n  var chart1 = chart1Canvas.getContext('2d');\n  var chart2 = chart2Canvas.getContext('2d');\n  var globalDRate = 0;\n  \n  \n  \n  const globalChartBarColors = [\n    'rgba(201, 203, 207, 0.7)',\n    'rgba(255, 159, 64, 0.7)',\n    'rgba(153, 102, 255, 0.7)',\n    'rgba(255, 205, 86, 0.7)',\n    'rgba(75, 192, 192, 0.7)',\n    'rgba(54, 162, 235, 0.7)',\n    'rgba(255, 99, 132, 0.7)'  \n  ];\n  \n  const globalChartBorderColors = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(201, 203, 207)',\n    'rgb(255, 159, 64)',\n    'rgb(153, 102, 255)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(255, 99, 132)' \n  ];\n  \n // Add value labels on each element within a stack\n Chart.plugins.register({\n  afterDatasetsDraw: function (chart, easing) {\n    var ctx = chart.ctx;\n    var grandTotal = 0;\n\n    chart.data.labels.forEach(function (label, labelIndex) {\n      var total = 0;\n      var highestIndex = 0;\n      chart.data.datasets.forEach(function (dataset, datasetIndex) {\n        var meta = chart.getDatasetMeta(datasetIndex);\n        if (!meta.hidden) {\n          total += dataset.data[labelIndex];\n          highestIndex = datasetIndex\n        };\n      });\n      grandTotal += total;\n\n      // Display total at the top of each category\n      var xPos = chart.getDatasetMeta(highestIndex).data[labelIndex]._model.x;\n      var yPos = chart.getDatasetMeta(highestIndex).data[labelIndex]._model.y - 5; // Adjust label position as needed\n      ctx.save(); // .save and .restore functions are used to save and restore the drawing state before and after rotation\n      ctx.translate(xPos, yPos);  // Move the drawing origin to the desired position\n      ctx.rotate(-Math.PI / 2); // 90 degree rotate\n      ctx.fillStyle = 'black'; // Label text color\n      ctx.font = '12px Arial'; // Label font size and family\n      ctx.textAlign = 'center';\n      ctx.fillText(total.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"), 0, 0);\n      ctx.restore();\n    });\n    // Grand Total:\n    ctx.save();\n    ctx.fillStyle = 'black'; // Label text color\n    ctx.font = '14px Arial'; // Label font size and family\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'top';\n    ctx.fillText(`Total Payments: ${grandTotal.toLocaleString()}`, chart.width - 20, 20);\n    ctx.restore();\n  }\n});\n  \n  //Added 2/8/24\n  function renderUALChart(chartName, cDataSet) {\n    const ctx = document.getElementById(chartName).getContext('2d');  //move this to async function?\n    var xValues = [];\n    for (let i = 0; i < cDataSet[0][\"data\"].length; i++) {\n      xValues.push(2024 + i); //parameterize starting year so not hard-coded\n    };\n    Chart.Legend.prototype.afterFit = function() {\n      this.height = this.height + 35;\n    };  \n    const chartUAL = new Chart(chartName,{\n      type: 'bar',\n      data: {\n          labels: xValues,\n          datasets: cDataSet\n      },\n      options: {\n           legend: {\n               \n           },\n          scales: {\n            xAxes: [{ stacked: true }],\n            yAxes: [{ stacked: true, \n              ticks: { \n                callback: function (value, index, values) {\n                  //return '$' + value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n                  return '$' + value.toLocaleString();\n                }\n              } \n            }]\n          },\n          tooltips: {\n            callbacks: {\n              label: function (tooltipItem, data) {\n                return '$' + tooltipItem.yLabel.toLocaleString();\n              }\n            }\n          }\n      }\n  \n    });\n  \n    // Expose  chart globally if to update later\n    if (chartName == \"chartUAL\") {\n      window.chartUAL = chartUAL;\n    } else if (chartName == \"chartHypUAL\") {\n      window.chartHypUAL = chartUAL;\n    }\n\n  }\n  \n  // Added 1/19/24\n  async function getPoolSummary() {\n    try {\n      await Excel.run(async (context) => {\n        // Get the selected range\n        let sheetER = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\")\n        let sheetFinRslt = context.workbook.worksheets.getItem(\"export_rp_financing_all\")\n        //const selectedRange = context.workbook.getSelectedRange();\n        const keyColumnIndex = 0;\n        const employerCID = sheetER.getRange(\"calpers_id\");\n        const employerRslts = sheetFinRslt.getRange(\"A5:NM3000\");\n        const employerRsltsKey = sheetFinRslt.getRange(\"A4:NM4\");\n        const finRsltCds = [63, 788];\n        ////////////////////////////////////////////////////////\n        ////////  Financing Result Codes: \n        ////////    63 - Total Active #\n        ////////    788 - Total Unique Retiree #\n        ////////////////////////////////////////////////////////\n  \n        // Load the values of the selected range\n        employerCID.load(\"values\");\n        employerRslts.load(\"address, columnCount, rowCount, values\");\n        employerRsltsKey.load(\"address, columnCount, rowCount, values\");\n  \n        // Run the queued commands to load values\n        await context.sync();\n  \n        // Calculate totals and averages\n        var rsltColumnIndex = 0\n        const values = employerRslts.values;\n  \n        // Create lists to store matching rows and columns to sum across\n        const matchingRows = [];\n        const matchingColumns = [];\n  \n        // Iterate through the rows and identify matching rows\n        for (let row = 0; row < employerRslts.values.length; row++) {\n          const key = employerRslts.values[row][keyColumnIndex];\n          if (employerCID.values == key) {\n            matchingRows.push(row);\n          }\n        }\n  \n        // Iterate through the columns and identify matching columns\n        for (let col = 3; col < employerRslts.columnCount; col++) {\n          const header = employerRsltsKey.values[0][col];\n          if (finRsltCds.includes(header)) {\n            matchingColumns.push(col);\n          }\n        }\n  \n        // Create a dictionary to store totals for each column\n        const columnTotals = {};\n  \n        // Iterate only across the relevant portion of the result range for totals\n        for (const col of matchingColumns) {\n          // Initialize total for the column if not already present\n          const rsltType = Number(employerRsltsKey.values[0][col]);\n          columnTotals[rsltType] = columnTotals[rsltType] || 0;\n  \n          for (const row of matchingRows) {\n            if (employerCID.values == employerRslts.values[row][keyColumnIndex]) {\n              const numericValue = Number(employerRslts.values[row][col]); //First column is indexed to 0\n              if (!isNaN(numericValue)) {\n                columnTotals[rsltType] += numericValue;\n              //const average = total / (employerRslts.rowCount * employerRslts.columnCount);\n              }\n            }\n          }\n        }\n  \n  \n        // Display the summary in a dialog box\n        await context.sync();\n        console.log(`The summary range address was ${employerRslts.address}.`);\n        console.log(`The ER CID was ${employerCID.values}.`);\n        //console.log(`rslt type 63: ${columnTotals[63]}`);\n        console.log(\"Column Totals:\");\n        Object.keys(columnTotals).forEach((rsltType) => {\n          console.log(`${rsltType}: ${columnTotals[rsltType]}`);\n        });\n        \n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Added 1/25/24\n  async function getPlanSummary() {\n    try {\n      await Excel.run(async (context) => {\n        // Get the selected range\n        let sheetER = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\")\n        let sheetFinRslt = context.workbook.worksheets.getItem(\"export_rp_financing_all\")\n        //const selectedRange = context.workbook.getSelectedRange();\n        const keyColumnIndex = 0;\n        const employerCID = sheetER.getRange(\"calpers_id\");\n        const employerRslts = sheetFinRslt.getRange(\"A5:NM3000\");\n        const employerRsltsKey = sheetFinRslt.getRange(\"A4:NM4\");\n        const finRsltCds = [63, 788];\n        ////////////////////////////////////////////////////////\n        ////////  Financing Result Codes: \n        ////////    63 - Total Active #\n        ////////    788 - Total Unique Retiree #\n        ////////////////////////////////////////////////////////\n  \n        // Load the values of the selected range\n        employerCID.load(\"values\");\n        employerRslts.load(\"address, columnCount, rowCount, values\");\n        employerRsltsKey.load(\"address, columnCount, rowCount, values\");\n  \n        // Run the queued commands to load values\n        await context.sync();\n  \n        // Calculate totals and averages\n        var rsltColumnIndex = 0\n        const values = employerRslts.values;\n  \n        // Create lists to store matching rows and columns to sum across\n        const matchingRows = [];\n        const matchingColumns = [];\n  \n        // Iterate through the rows and identify matching rows\n        const employerRows = {};\n        for (let row = 0; row < employerRslts.values.length; row++) {\n          const key = employerRslts.values[row][keyColumnIndex];\n          if (employerCID.values == key) {\n            matchingRows.push(row);\n            employerRows[employerRslts.values[row][2]] = employerRows[employerRslts.values[row][2]] || 0;\n          }\n        }\n  \n        // Iterate through the columns and identify matching columns\n        for (let col = 3; col < employerRslts.columnCount; col++) {\n          const header = employerRsltsKey.values[0][col];\n          if (finRsltCds.includes(header)) {\n            matchingColumns.push(col);\n          }\n        }\n  \n        // Create dictionaries to store totals and values for each column\n        const columnTotals = {};\n  \n        // Iterate only across the relevant portion of the result range for totals\n        for (const row of matchingRows) {\n          const employerVRP = Number(employerRslts.values[row][2]);\n          const rowValues = {};  // Nest within employerRows{}\n  \n          for (const col of matchingColumns) {\n            // Initialize total for the column if not already present\n            const rsltType = Number(employerRsltsKey.values[0][col]);\n            columnTotals[rsltType] = columnTotals[rsltType] || 0;\n            if (employerCID.values == employerRslts.values[row][keyColumnIndex]) {\n              const numericValue = Number(employerRslts.values[row][col]); //First column is indexed to 0\n              if (!isNaN(numericValue)) {\n                columnTotals[rsltType] += numericValue;\n                rowValues[rsltType] = numericValue;\n              //const average = total / (employerRslts.rowCount * employerRslts.columnCount);\n              }\n            }\n          }\n          employerRows[employerVRP] = rowValues;\n  \n        }\n  \n  \n        // Display the summary in a dialog box\n        await context.sync();\n        console.log(`The summary range address was ${employerRslts.address}.`);\n        console.log(`The ER CID was ${employerCID.values}.`);\n        //console.log(`rslt type 63: ${columnTotals[63]}`);\n        console.log(\"Column Totals:\");\n        Object.keys(columnTotals).forEach((rsltType) => {\n          console.log(`Fin Result ${rsltType} Total: ${columnTotals[rsltType]}`);\n        });\n        Object.keys(employerRows).forEach((key) => {\n          Object.keys(employerRows[key]).forEach((inner) => {\n            console.log(`VRP ${key}: Fin Result ${inner}: ${employerRows[key][inner]}`);\n          });\n        });\n        console.log(employerRows);\n        \n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Added 1/26/24\n  async function getAmortSummary() {\n    try {\n      await Excel.run(async (context) => {\n        // Get the selected range\n        let sheetCtrl = context.workbook.worksheets.getItem(\"control\")\n        let sheetER = context.workbook.worksheets.getItem(\"calcs_current_rate_plan\")\n        let sheetFinRslt = context.workbook.worksheets.getItem(\"export_rp_financing_all\")\n        let sheetAmortRslt = context.workbook.worksheets.getItem(\"export_rp_amort_base_all\")\n        const keyColumnIndex = 0;  // Column from sheetFinRslt to lookup VRPs under an ER CID\n        const keyAmortColumnIndex = 0;  // Column from sheetFinRslt to lookup VRPs under an ER CID\n        const employerCID = sheetER.getRange(\"calpers_id\");\n        const discountRate = sheetCtrl.getRange(\"interest_rate\");\n        const payrollInflRate = sheetCtrl.getRange(\"payroll_growth\");\n        const finRslts = sheetFinRslt.getRange(\"A5:NM3000\");\n        const finAmortRows = sheetAmortRslt.getRange(\"C3:W30000\");\n        const finAmortRowsKey = sheetAmortRslt.getRange(\"C2:W2\");\n        const amortRows = {};\n  \n        ////////////////////////////////////////////////////////\n        ////////  Amort Base Columns: \n        ////////    Column C - VAL_RATE_PLAN_IDENTIFIER\n        ////////    Column D - VALUATION_YEAR_ID\n        ////////    Column E - AMORT_CAUSE_TYPE_CD\n        ////////    Column F - AMORT_DESC\n        ////////    Column G - AMORT_FUNDING_TYPE_CD\n        ////////    Column H - AMORT_PERIOD_TYPE_CD\n        ////////    Column I - INITIAL_VALUATION_YEAR_ID\n        ////////    Column J - INITIAL_AMORT_PERIOD\n        ////////    Column K - INITIAL_RAMP_PERIOD_YRS\n        ////////    Column L - INITIAL_AMT\n        ////////    Column M - AMORT_PERIOD\n        ////////    Column N - VAL_DATE_AMT\n        ////////    Column O - VAL_DATE1_AMT\n        ////////    Column P - VAL_DATE2_AMT\n        ////////    Column Q - VAL_DATE_PMT\n        ////////    Column R - VAL_DATE1_PMT\n        ////////    Column S - VAL_DATE2_PMT\n        ////////    Column T - PMT_PERCENT  // Can ignore?\n        ////////    Column U - RAMP_DIRECTION_TYPE_CD\n        ////////    Column V - RAMP_PCNT\n        ////////    Column W - RAMP_UP_ONLY_FLAG\n        ////////////////////////////////////////////////////////\n  \n        // Load the values of the selected range\n        employerCID.load(\"values\");\n        discountRate.load(\"values\");\n        payrollInflRate.load(\"values\");\n        finRslts.load(\"address, columnCount, rowCount, values\");\n        finAmortRows.load(\"address, columnCount, rowCount, values\");\n        finAmortRowsKey.load(\"address, columnCount, rowCount, values\");\n  \n        // Run the queued commands to load values\n        await context.sync();\n  \n        // Calculate totals and averages\n        var rsltColumnIndex = 0;\n        const values = finRslts.values;\n  \n        // Create lists to store matching rows and columns to sum across\n        const matchingRows = [];\n        const matchingColumns = [];\n  \n        // Iterate through fin result tab to find ER's plans\n        const employerRows = {};\n        for (let row = 0; row < finRslts.values.length; row++) {\n          const key = finRslts.values[row][keyColumnIndex];\n          if (employerCID.values == key) {\n            employerRows[finRslts.values[row][2]] = employerRows[finRslts.values[row][2]] || 0;\n            amortRows[finRslts.values[row][2]] = [];\n          }\n        }\n  \n        let employerPlans = [];\n        Object.keys(employerRows).forEach((key) => {\n          employerPlans.push(key);\n        })\n        \n  \n        // Iterate through the amort rows and identify ER's rows within the plans\n        for (let row = 0; row < finAmortRows.values.length; row++) {\n          const key = finAmortRows.values[row][keyAmortColumnIndex];\n          if (key in employerRows) {\n            matchingRows.push(row);\n          }\n        }\n  \n        // Iterate through the columns and identify matching columns\n        for (let col = 0; col < finAmortRows.columnCount; col++) {\n          const header = finAmortRowsKey.values[0][col];\n          // if (finRsltCds.includes(header)) {\n          matchingColumns.push(col);\n          // }\n        }\n  \n        // Create dictionaries to store totals and values for each column\n        const columnTotals = {};\n  \n        // Iterate only across the relevant portion of the result range for totals\n        for (const row of matchingRows) {\n          const employerVRP = Number(finAmortRows.values[row][0]);\n          const rowValues = {};  // Nest within employerRows{}\n  \n          for (const col of matchingColumns) {\n            // Initialize total for the column if not already present\n            const rsltType = finAmortRowsKey.values[0][col];\n            columnTotals[rsltType] = columnTotals[rsltType] || 0;\n            const numericValue = Number(finAmortRows.values[row][col]); //First column is indexed to 0\n            if (!isNaN(numericValue)) {\n              columnTotals[rsltType] += numericValue;\n            }\n            rowValues[rsltType] = finAmortRows.values[row][col];\n          }\n          amortRows[employerVRP].push(rowValues);\n        }\n  \n  \n        // Display the summary in a dialog box\n        await context.sync();\n        console.log(`The summary range address was ${finAmortRows.address}.`);\n        console.log(`The ER CID was ${employerCID.values}.`);\n        console.log(columnTotals);\n        console.log(amortRows);\n        const dRate = Number(discountRate.values[0]);\n        globalDRate = Number(dRate);\n        const pRate = Number(payrollInflRate.values[0]);\n        var amortSch = getAmortTotal(amortRows, dRate, pRate);\n        amortSch = getUpdSchedule(amortSch, dRate, pRate); // Checks for negative balances at the end of a schedule and simulates single year Fresh Start\n  \n        // Update the chart ///////////////////////////////////////////////////////////////////////////////////////////\n        console.log(\"The updated ER amort schedules are:\");\n        console.log(amortSch);\n        barChartUAL.data.splice(0); // Clear the data set first\n        let i = 0;\n        Object.keys(amortSch).forEach((key) => {\n          barChartUAL.addData(key, amortSch[key], globalChartBarColors[i % 7], globalChartBorderColors[i % 7]); // Currently set to cycle between 7 colors\n          i = i + 1;\n        })\n        barChartUALBalance.data.splice(0); // Clear the data set first\n        // Store balance data for use in fresh starts\n        i = 0;\n        Object.keys(amortSch).forEach((key) => {\n          barChartUALBalance.addBalanceData(key, amortSch[key], globalChartBarColors[i % 7], globalChartBorderColors[i % 7]); // Currently set to cycle between 7 colors\n          i = i + 1;\n        })\n        replaceCanvas(\"chartContainer1\",\"chartUAL\");\n        chart1.clearRect(0, 0, chart1Canvas.width, chart1Canvas.height);\n        renderUALChart(\"chartUAL\", barChartUAL.data);\n        barChartHypUAL.data.splice(0); // Clear the data set first\n        i = 0;\n        Object.keys(amortSch).forEach((key) => {\n          barChartHypUAL.addData(key, amortSch[key], globalChartBarColors[i % 7], globalChartBorderColors[i % 7]); // Currently set to cycle between 7 colors\n          i = i + 1;\n        })\n        replaceCanvas(\"chartContainer2\",\"chartHypUAL\");\n        chart2.clearRect(0, 0, chart2Canvas.width, chart2Canvas.height);    \n        renderUALChart(\"chartHypUAL\", barChartHypUAL.data);\n        \n        // renderUALChart(\"chartHypUAL\", chart2.data);\n        // //chart2.update();\n        // //chart2.ctx.restore();\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Added 2/1/24  --  Array of specified length filled with 0's\n  function createProjArray(len) {\n    return new Array(len).fill(0);\n  }\n  \n  // Added 1/31/24\n  function getAmortTotal(amortRows, dRate, payInflRate) {\n    try {\n      ////////////////////////////////////////////////////////\n      ////////  Amort Base Columns: \n      ////////    Column C - VAL_RATE_PLAN_IDENTIFIER\n      ////////    Column D - VALUATION_YEAR_ID\n      ////////    Column E - AMORT_CAUSE_TYPE_CD\n      ////////    Column F - AMORT_DESC\n      ////////    Column G - AMORT_FUNDING_TYPE_CD\n      ////////    Column H - AMORT_PERIOD_TYPE_CD\n      ////////    Column I - INITIAL_VALUATION_YEAR_ID\n      ////////    Column J - INITIAL_AMORT_PERIOD\n      ////////    Column K - INITIAL_RAMP_PERIOD_YRS\n      ////////    Column L - INITIAL_AMT\n      ////////    Column M - AMORT_PERIOD\n      ////////    Column N - VAL_DATE_AMT\n      ////////    Column O - VAL_DATE1_AMT\n      ////////    Column P - VAL_DATE2_AMT\n      ////////    Column Q - VAL_DATE_PMT\n      ////////    Column R - VAL_DATE1_PMT\n      ////////    Column S - VAL_DATE2_PMT\n      ////////    Column T - PMT_PERCENT  // Can ignore?\n      ////////    Column U - RAMP_DIRECTION_TYPE_CD\n      ////////    Column V - RAMP_PCNT\n      ////////    Column W - RAMP_UP_ONLY_FLAG\n      ////////////////////////////////////////////////////////\n  \n  \n      // Create object for storing plan amort balances and payments\n      const plans = {};\n  \n      // Iterate only across the relevant portion of the result range for totals\n      Object.keys(amortRows).forEach((ratePlan) => {\n        var planDtls = {'Total Balance': createProjArray(30), 'Total Payments': createProjArray(30)};  \n        const amortList = amortRows[ratePlan];\n        //console.log(amortList);\n  \n        for (const j in amortList) {\n          // roll forward balance and payment across each amort row\n          const amortBase = amortList[j]\n          var baseDtls = {'Total Balance': createProjArray(30), 'Total Payments': createProjArray(30)};\n          for (let i = 0; i < Math.max(Number(amortBase['AMORT_PERIOD']), 0); i++) {\n            if (i == 0) {\n              baseDtls['Total Balance'][i] = amortBase['VAL_DATE2_AMT']; // Start at rate-setting year, NOT val date\n              baseDtls['Total Payments'][i] = amortBase['VAL_DATE2_PMT']; // Start at rate-setting year, NOT val date\n            } else {\n              var iPrime = dRate; // Default to level-dollar funding type\n              if (amortBase['AMORT_FUNDING_TYPE_CD'] == '002') { // Use level-percent of pay if applicable\n                iPrime = ((1 + dRate) / (1 + payInflRate)) - 1;\n              }\n              const numericValueBal = Math.round(Number(baseDtls['Total Balance'][i - 1]) * (1 + dRate) - Number(baseDtls['Total Payments'][i - 1]) * Math.pow(1 + dRate, 0.5));\n              const numericValuePmt = Math.round(dRSPmt(iPrime,Number(amortBase['INITIAL_AMORT_PERIOD']),Number(amortBase['AMORT_PERIOD']) - i,Number(amortBase['INITIAL_RAMP_PERIOD_YRS']),numericValueBal * Math.pow(1 + dRate, 0.5),Number(amortBase['RAMP_UP_ONLY_FLAG'])));\n              if (!isNaN(numericValueBal)) {\n                baseDtls['Total Balance'][i] = numericValueBal;\n              }\n              if (!isNaN(numericValuePmt)) {\n                baseDtls['Total Payments'][i] = numericValuePmt;\n              }\n            }\n            // Add on the base's amounts to the plans total for that year\n            planDtls['Total Balance'][i] += baseDtls['Total Balance'][i];\n            planDtls['Total Payments'][i] += baseDtls['Total Payments'][i];\n          }\n          //console.log(amortBase); // Uncomment for debugging\n          //console.log(baseDtls); // Uncomment for debugging\n        }\n        // Now that the plan is processed, store results before moving to next plan\n        // Still need to check if end of schedule needs altering for negative balance\n        plans[ratePlan] = plans[ratePlan] || planDtls;\n      });\n  \n  \n      // Display the summary in a dialog box\n      console.log(\"The original ER amort schedules are:\");\n      console.log(plans);\n      return plans;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Added 2/2/24\n  function getUpdSchedule(origSchedule, dRate, payInflRate) {\n    try {\n      // Iterate only across the relevant portion of the result range for totals\n      var amortSchedule = origSchedule;\n  \n      Object.keys(amortSchedule).forEach((ratePlan) => {\n        var planBalances = amortSchedule[ratePlan]['Total Balance'];\n        var planPayments = amortSchedule[ratePlan]['Total Payments'];\n  \n        // Start evaluation at index 1 (after rate-setting year) since payment for prior year has already been evaluated by financing\n        var setZero = false;\n        for (let i = 1; i < 30; i++) {\n          if (setZero) {\n            planBalances[i] = 0;\n            planPayments[i] = 0;\n          } else {\n            if (Number(planBalances[i]) < 0) {\n              planPayments[i-1] = Math.round(Number(planBalances[i-1]) * Math.pow(1 + dRate, 0.5));\n              planBalances[i] = 0;\n              planPayments[i] = 0;\n              setZero = true;\n            }\n          }\n        };\n        \n        // Now that the plan is processed, store results before moving to next plan\n        amortSchedule[ratePlan]['Total Balance'] = amortSchedule[ratePlan]['Total Balance'] || planBalances;\n        amortSchedule[ratePlan]['Total Payments'] = amortSchedule[ratePlan]['Total Payments'] || planPayments;\n      });\n  \n      // Display the summary in a dialog box\n      //console.log(\"The updated ER amort schedules are:\");\n      //console.log(amortSchedule);\n      return amortSchedule;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Added 2/13/24\n  function freshStartSchedule(begBalance, dRate, period) {\n    try {\n      var planBalances = createProjArray(30);\n      var planPayments = createProjArray(30);\n  \n      planBalances[0] = Number(begBalance);\n      planPayments[0] = Math.round(dRSPmt(Number(dRate), Number(period), Number(period), 1, Number(planBalances[0]) * Math.pow(1 + Number(dRate), 0.5), 0));\n  \n      // Start evaluation at index 1 (after rate-setting year)\n      // Iterate only across the relevant portion of the result range for totals\n      for (let i = 1; i < Number(period); i++) {\n        planBalances[i] = Math.round(Number(planBalances[i-1]) * (1 + dRate) - Number(planPayments[i-1]) * Math.pow(1 + dRate, 0.5));\n        planPayments[i] = Math.round(dRSPmt(Number(dRate),Number(period),Number(period) - i,1,planBalances[i] * Math.pow(1 + dRate, 0.5),0));\n      };\n  \n      return planPayments;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  // Function to get rate plan and FS period for simulation\n  async function inputFS() {\n    try {\n  \n      // Get the selected values from the dropdowns asynchronously\n      var selectedPlan = document.getElementById(\"dropdownPlanin\").value;\n      var selectedPeriod = document.getElementById(\"dropdownPeriodin\").value;\n  \n      console.log(selectedPlan);\n      console.log(selectedPeriod);\n      // Start building the payment schedule\n      // Update the chart ///////////////////////////////////////////////////////////////////////////////////////////\n      for (let i = 0; i < barChartHypUAL[\"data\"].length; i++) {\n        if (barChartHypUAL[\"data\"][i][\"label\"] == \"VRP \" + selectedPlan) {\n          var hypArray = [];\n          // Assumes barChartUALBalance corresponds to same ordering as barChartHypUAL\n          hypArray = freshStartSchedule(Number(barChartUALBalance[\"data\"][i][\"data\"][0]), globalDRate, selectedPeriod); //Currently grabbing first payment, needs to grab beginning balance\n          barChartHypUAL[\"data\"][i][\"data\"].splice(0, 30);\n          barChartHypUAL[\"data\"][i][\"data\"].unshift(...hypArray);\n        }\n      }\n      //chart2.clearRect(0, 0, chart2Canvas.width, chart2Canvas.height);    \n      //renderUALChart(\"chartHypUAL\", barChartHypUAL.data);\n      window.chartUAL.update();\n      window.chartHypUAL.update();\n\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  function dropDPopulate(valueArray) {\n    var dropdownElement = document.getElementById(\"dropdownPlan\");\n    // Clear existing options\n    dropdownElement.innerHTML = \"\";\n    // Populate dropdown with options\n    for (let i = 0; i < valueArray.length; i++) {\n      var option = document.createElement(\"option\");\n      option.value = valueArray[i];\n      option.text = valueArray[i];\n      dropdownElement.appendChild(option);\n    }\n  }\n  \n  function getSelectedDropD(dropDown) {\n    return new Promise((resolve, reject) => {\n      // Assuming dropdown has an id attribute set to \"dropdown\"\n      var dropdownElement = document.getElementById(dropDown);\n  \n      // Check if the element is found\n      if (dropdownElement) {\n        // Get the selected value\n        var selectedValue = dropdownElement.value;\n  \n        // Resolve the promise with the selected value\n        resolve(selectedValue);\n      } else {\n        // Reject the promise with an error\n        reject(new Error(\"Dropdown element not found\"));\n      }\n    });\n  }\n\n  \n  // Brute force clear any charts in the container\n  function replaceCanvas(containerName, canvasName) {\n    const container = document.getElementById(containerName);\n    const oldCanvas = document.getElementById(canvasName);\n    container.removeChild(oldCanvas);\n \n    const newCanvas = document.createElement(\"canvas\");\n    newCanvas.id = canvasName\n    container.appendChild(newCanvas);\n \n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n  // Added 1/29/24 ////////// DRS PAYMENT FUNCTIONS /////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n  function dRSPmt(rate, origPer, remPer, rampPer, presVal, rampFlag) {\n    try {\n      var annuityFactor = 0;\n      if (rampFlag == 0) {\n        annuityFactor = dRSPresVal(rate, origPer, remPer, rampPer, 1)\n        if (annuityFactor == 0) {\n          return 0;\n        } else {\n          return Math.min(rampPer, origPer - remPer + 1, Math.max(remPer, 0)) * (presVal / annuityFactor);\n        }\n      } else if (rampFlag == 1) {\n        for (let i = 1; i <= Math.max(1, rampPer + remPer - origPer); i++) {\n          var x = 1;\n          if ( i == 1) {\n            x = Math.min(rampPer, origPer - remPer + 1)\n          } \n          annuityFactor = annuityFactor + myPresVal(rate, remPer - i + 1, -1, 0, 1) * (Math.pow(1 + rate, 1 - i)) * x; //myPresVal\n        }\n        if (annuityFactor == 0) {\n          return 0;\n        } else {\n          return presVal / annuityFactor * Math.min(rampPer, origPer - remPer + 1);\n        }\n      } else {\n        return 0;\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  function dRSPresVal(rate, origPer, remPer, rampPer, pmt) {\n    try {\n      const step = Math.min(origPer - remPer, origPer - rampPer);\n      const numRampDowns = Math.min(rampPer, step, Math.max(remPer, 0));\n      const rampUp = myPresVal(rate, origPer - rampPer + 1, -1, 0, 1) * myPresVal(rate, Math.max(rampPer - step, 0), -1, 0, 1);\n      var rampDown = 0;\n      if (numRampDowns > 0) {\n        for(let i = 1; i <= numRampDowns; i++) {\n          rampDown = rampDown + myPresVal(rate, origPer - rampPer - step + i, -1, 0, 1);\n        }\n      }\n      return (rampUp + rampDown) * pmt;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  \n  function myPresVal(rate, nPer, pmt, futVal, beg) {\n    try {\n      return -(pmt * (1 + rate * beg) * ((Math.pow(1 + rate, nPer) - 1) / rate) + futVal) * (1 / Math.pow(1 + rate, nPer))\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n\n","// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"/assets/icon_tab.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./taskpane.js\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_2___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_3___ = new URL(\"/assets/icon_home.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_4___ = new URL(\"/assets/icon_sensitivity.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_5___ = new URL(\"/assets/icon_projections.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_6___ = new URL(\"/assets/icon_ual.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_7___ = new URL(\"../../assets/logo_ACTO.png\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar ___HTML_LOADER_REPLACEMENT_2___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_2___);\nvar ___HTML_LOADER_REPLACEMENT_3___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_3___);\nvar ___HTML_LOADER_REPLACEMENT_4___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_4___);\nvar ___HTML_LOADER_REPLACEMENT_5___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_5___);\nvar ___HTML_LOADER_REPLACEMENT_6___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_6___);\nvar ___HTML_LOADER_REPLACEMENT_7___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_7___);\nvar code = \" <!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Employer Pool Summary</title> <link rel=\\\"icon\\\" href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\"> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js\\\"><\" + \"/script> <\" + \"script defer=\\\"defer\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_2___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <main> <header class=\\\"header\\\"> <h2 id=\\\"idERname\\\"> Employer-Name</h2> <h5 id=\\\"idERcid\\\">123456789</h5> <h5 id=\\\"idVY\\\">YYYY</h5> </header> <div class=\\\"toptab\\\"> <button class=\\\"tablinks\\\" onclick='openTab(event,\\\"home-tab\\\")'> Home <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_3___ + \"\\\" alt=\\\"Home icon\\\" width=\\\"25\\\" height=\\\"25\\\"> </button> <button class=\\\"tablinks\\\" onclick='openTab(event,\\\"Sensitivity-tab\\\")'> Sensitivity <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_4___ + \"\\\" alt=\\\"Sensitivity Analysis icon\\\" width=\\\"25\\\" height=\\\"25\\\"> </button> <button class=\\\"tablinks\\\" onclick='openTab(event,\\\"Projections-tab\\\")'> Projections <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_5___ + \"\\\" alt=\\\"Projected Contributions icon\\\" width=\\\"25\\\" height=\\\"25\\\"> </button> <button class=\\\"tablinks\\\" onclick='openTab(event,\\\"UAL-tab\\\")'> UAL <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_6___ + \"\\\" alt=\\\"Unfunded Accrued Liability icon\\\" width=\\\"25\\\" height=\\\"25\\\"> </button> </div> <div class=\\\"content\\\"> <div id=\\\"home-tab\\\" class=\\\"tabcontent\\\"> <img width=\\\"250\\\" height=\\\"250\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_7___ + \"\\\" alt=\\\"ACTO Logo\\\" title=\\\"ACTO-Logo\\\"/> <h1> Employer Pool Result Summary</h1> <br> <span id=\\\"workbookname\\\"></span> <h4> Additional Tools</h4> <br> &#128760; Theme Selection <select name=\\\"theme-select\\\" id=\\\"theme-select\\\" title=\\\"themeselection\\\"> <option value=\\\"dark\\\">TechNo</option> <option value=\\\"pink\\\">PinkY</option> </select> <br> </div> <div id=\\\"Sensitivity-tab\\\" class=\\\"tabcontent\\\"> <h3>Maturity Measures</h3> <table id=\\\"idTblmaturityMeasures\\\"> <thead> <tr> <th>Rate Plan Name</th> <th>Val Rate Plan Id</th> <th>Retiree AL to Total AL Ratio</th> <th>Active to Unique Retiree Ratio</th> <th>Active Count</th> <th>Retiree Count</th> <th>Unique Retiree Count</th> <th>Retiree AL</th> <th>Total AL</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3> Hypothetical Termination </h3> <table id=\\\"idTblHypotheticalTerm\\\"> <thead> <tr> <th colspan=\\\"2\\\"></th> <th colspan=\\\"3\\\">1.75 % </th> <th colspan=\\\"3\\\">4.50 % </th> </tr> <tr> <th>Plan Name</th> <th>VRP</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3>Discount Rate Sensitivity &plusmn; 1%</h3> <table id=\\\"idTblDiscountSensitivity\\\"> <thead> <tr> <th colspan=\\\"2\\\"></th> <th colspan=\\\"4\\\">Low Scenario</th> <th colspan=\\\"4\\\">Baseline Scenario</th> <th colspan=\\\"4\\\">High Scenario</th> </tr> <tr> <th>Rate Plan Name</th> <th>Val Rate Plan Id</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio (MVA / AL)</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio (MVA / AL)</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio (MVA / AL)</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3>Inflation Last Annual &plusmn; 1%</h3> <table id=\\\"idTblInflationSensitivity\\\"> <thead> <tr> <th colspan=\\\"2\\\"></th> <th colspan=\\\"4\\\">Low Scenario</th> <th colspan=\\\"4\\\">Baseline Scenario</th> <th colspan=\\\"4\\\">High Scenario</th> </tr> <tr> <th>Rate Plan Name</th> <th>Val Rate Plan Id</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio (MVA / AL)</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio (MVA / AL)</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio (MVA / AL)</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <h3>Mortality Sensitivity &plusmn; 10%</h3> <table id=\\\"idTblMortalitySensitivity\\\"> <thead> <tr> <th colspan=\\\"2\\\"></th> <th colspan=\\\"4\\\">Low Scenario</th> <th colspan=\\\"4\\\">Baseline Scenario</th> <th colspan=\\\"4\\\">High Scenario</th> </tr> <tr> <th>Rate Plan Name</th> <th>Val Rate Plan Id</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio (MVA / AL)</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio (MVA / AL)</th> <th>Total NC</th> <th>AL</th> <th>UAL</th> <th>Funded Ratio (MVA / AL)</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> </div> <div id=\\\"Projections-tab\\\" class=\\\"tabcontent\\\"> <h2 id=\\\"ProjectionCollapse\\\" onclick='ProjectionCollapse([\\\"idTblprojections\\\",\\\"idTblprojections1\\\",\\\"idTblprojections2\\\",\\\"idTblprojections3\\\",\\\"idTblprojections4\\\"])'>Projected Contributions</h2> <table id=\\\"idTblprojections\\\"> <thead> <tr> <th>Rate Plan Name</th> <th>Val Rate Plan Id</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections1\\\"> <thead> <tr> <th>Rate Plan Name</th> <th>Val Rate Plan Id</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections2\\\"> <thead> <tr> <th>Rate Plan Name</th> <th>Val Rate Plan Id</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections3\\\"> <thead> <tr> <th>Rate Plan Name</th> <th>Val Rate Plan Id</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> <table id=\\\"idTblprojections4\\\"> <thead> <tr> <th>Rate Plan Name</th> <th>Val Rate Plan Id</th> <th>Projected Payroll for Contribution Year</th> <th>UAL Contribution $</th> <th>ER Normal Cost $</th> <th>UAL Contribution %</th> <th>ER Normal Cost %</th> <th>Total ER %</th> </tr> </thead> <tbody> </tbody> <tfoot> </tfoot> </table> </div> <div id=\\\"UAL-tab\\\" class=\\\"tabcontent\\\"> <h2>Unfunded Accrued Liability</h2> <div class=\\\"AmortSelect\\\"> <label>Valuation Rate Plan:</label> <select list=\\\"dropdownPlan\\\" title=\\\"Rate Plan Selection\\\" id=\\\"dropdownPlanin\\\"></select> <br> <label>Fresh Start Period:</label> <select list=\\\"dropdownPeriod\\\" title=\\\"Period Selection\\\" id=\\\"dropdownPeriodin\\\"></select> <button id=\\\"buttonFreshStart\\\">Simulate Fresh Start</button> </div> <h2>Combined UAL Schedule</h2> <div class=\\\"chart-container\\\" id=\\\"chartContainer1\\\"> <canvas id=\\\"chartUAL\\\"></canvas> </div> <br> <h2>Hypothetical UAL Schedule</h2> <div class=\\\"chart-container\\\" id=\\\"chartContainer2\\\"> <canvas id=\\\"chartHypUAL\\\"></canvas> </div> </div> </div> <div class=\\\"footer\\\"> &#128056; 2024 Actuarial Office Technology Team - CalPERS </div> </main> </body> <\" + \"script>const setTheme=e=>document.documentElement.className=e;function openTab(e,t){var n,l,o;for(l=document.getElementsByClassName(\\\"tabcontent\\\"),n=0;n<l.length;n++)l[n].style.display=\\\"none\\\";for(o=document.getElementsByClassName(\\\"tablinks\\\"),n=0;n<o.length;n++)o[n].className=o[n].className.replace(\\\" active\\\",\\\"\\\");document.getElementById(t).style.display=\\\"home-tab\\\"==t?\\\"flex\\\":\\\"block\\\",e.currentTarget.className+=\\\" active\\\"}function ProjectionCollapse(e){let t=0;var n=new Date(document.getElementById(\\\"idVY\\\").innerHTML);if(valYear=n.getFullYear(),\\\"Projected Contributions\\\"==document.getElementById(\\\"ProjectionCollapse\\\").innerHTML)return e.forEach((n=>{document.getElementById(n).rows[0].cells[0].innerHTML=\\\"Valuation Year\\\",document.getElementById(n).rows[0].cells[1].innerHTML=\\\"Rate Setting Year\\\",document.getElementById(n).getElementsByTagName(\\\"tbody\\\")[0].style.display=\\\"none\\\",n!=e[0]&&(document.getElementById(n).getElementsByTagName(\\\"thead\\\")[0].style.display=\\\"none\\\"),document.getElementById(n).rows[document.getElementById(n).rows.length-1].cells[0].innerHTML=\\\"06/30/\\\"+(valYear+t)+\\\" | \\\"+(valYear+t+2)+\\\"-\\\"+(valYear+t+3),t+=1})),void(document.getElementById(\\\"ProjectionCollapse\\\").innerHTML=\\\"Employer Projected Contributions\\\");let l=0;return\\\"Employer Projected Contributions\\\"==document.getElementById(\\\"ProjectionCollapse\\\").innerHTML?(e.forEach((e=>{document.getElementById(e).rows[0].cells[0].innerHTML=\\\"Rate Plan Name\\\",document.getElementById(e).rows[0].cells[1].innerHTML=\\\"Val Rate Plan Id\\\",document.getElementById(e).getElementsByTagName(\\\"tbody\\\")[0].style.removeProperty(\\\"display\\\"),document.getElementById(e).getElementsByTagName(\\\"thead\\\")[0].style.removeProperty(\\\"display\\\"),document.getElementById(e).rows[document.getElementById(e).rows.length-1].cells[0].innerHTML=\\\"06/30/\\\"+(valYear+l)+\\\" Employer Total\\\",l+=1})),void(document.getElementById(\\\"ProjectionCollapse\\\").innerHTML=\\\"Projected Contributions\\\")):void 0}document.getElementById(\\\"theme-select\\\").addEventListener(\\\"change\\\",(function(){setTheme(this.value)}))<\" + \"/script> </html> \";\n// Exports\nexport default code;"],"names":["module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","value","Symbol","iterator","c","asyncIterator","u","toStringTag","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","args","arguments","apply","err","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","_toPrimitive","toPrimitive","Number","AgencyDetails","p_name","p_cid","cid","rateplans","allplanlist","data","row","VRP","ERName","RPName","CountyName","ActuaryName","RiskPoolID","CalPERSID","vrp","vrpname","actuaryname","riskpool","Rate_Plan_Id","Rate_Plan_Name","Actuary_Name","Risk_Pool","AssumptionDetails","p_vy","p_interest","p_salarygrowth","year","valuationyear","TableStructure","oAgency","oAssumptions","pTableNameID","pDataSource","aFieldCodes","aFormatCodes","aVisibilityCodes","aERTotalRowCodes","TableNameId","DataSource","FieldCodes","FormatCodes","VisibilityCodes","ERTotalRowCodes","FieldNames","ERTotalRowValues","SumTotalValues","VRPValues","getFieldNames","getVRPValues","getSumTotalvalues","getERTotalRowValues","_this","colMax","fincode","tmp_fieldname","col","_this2","rowMax","tmp_vrpvalues","RP_FinCode","RP_Value","fsum","retval","eval","val1","val2","indexOf","sum","onChange","_x2","_onChange","_callee3","event","_context3","Excel","run","_ref2","_callee2","context","_context2","sync","VRPTrigger","_x4","_x3","_VRPTrigger","_callee5","_context5","_ref3","_callee4","sheetER","vrpId","vrpRngLoc","_context4","workbook","worksheets","getItem","getRange","load","address","console","log","changeType","source","FetchExcelData","getAmortSummary","_x5","_FetchExcelData","_callee7","_context7","_ref4","_callee6","sheetRPfinancingAll","sheetPostRPfinancing","sheetCalcsCurRP","sheetRPinfo","sheetControl","sheetPEPRAEe","exl_RPfinancingAll","exl_PostRPfinancing","exl_RPinfo","exl_PEPRAEe","exl_EmployerName","exl_CalpersId","exl_ValuationYear","exl_InterestRate","exl_PayrollGrowth","RPinfo","Agency","Assumptions","Data","_context6","getRatePlans","LoadInfoToDoc","SummaryTableControl","_x6","oAssum","getElementById","innerHTML","optionVRP","optionFSperiod","sz","remove","optVRP","createElement","appendChild","oprPer","selectedIndex","aData","DS0","oTable_MM","oTable_HT","oTable_DR","oTable_IL","oTable_MS","oTable_P0","oTable_P1","oTable_P2","oTable_P3","oTable_P4","DataTableToHTML","oTable","tableBody","tableFoot","rows","deleteRow","insertRow","insertCell","fcode","cellVal","FormatVisible","result","toLocaleString","style","minimumFractionDigits","toFixed","rowF","cellER","colSpan","formatCode","cellf","Office","onReady","onclick","runApp","initialize","_ref","_callee","_context","onChanged","add","_x","ChartDataUAL","plan","planAmortSch","planColor","planBorderColor","objData","label","backgroundColor","borderColor","barChartUAL","barChartUALBalance","barChartHypUAL","chart1Canvas","chart2Canvas","chart1","getContext","chart2","globalDRate","globalChartBarColors","globalChartBorderColors","renderUALChart","chartName","cDataSet","xValues","Chart","Legend","afterFit","height","chartUAL","labels","datasets","legend","scales","xAxes","stacked","yAxes","ticks","callback","index","tooltips","callbacks","tooltipItem","yLabel","chartHypUAL","getPoolSummary","_getPoolSummary","_callee9","_context9","_ref5","_callee8","sheetFinRslt","keyColumnIndex","employerCID","employerRslts","employerRsltsKey","finRsltCds","matchingRows","matchingColumns","header","columnTotals","_i3","_matchingColumns","_col","rsltType","_iterator","_step","_row","numericValue","_context8","columnCount","includes","_createForOfIteratorHelper","_x7","t0","getPlanSummary","_getPlanSummary","_callee11","_context11","_ref6","_callee10","employerRows","_i4","_matchingRows","_row2","employerVRP","rowValues","_iterator2","_step2","_col2","_context10","inner","_x8","_getAmortSummary","_callee13","_context13","_ref7","_callee12","sheetCtrl","sheetAmortRslt","keyAmortColumnIndex","discountRate","payrollInflRate","finRslts","finAmortRows","finAmortRowsKey","amortRows","employerPlans","_row3","_i5","_matchingRows2","_row4","_iterator3","_step3","_col3","dRate","pRate","amortSch","_context12","getUpdSchedule","getAmortTotal","splice","addData","addBalanceData","replaceCanvas","clearRect","width","_x9","createProjArray","len","Array","fill","payInflRate","plans","ratePlan","planDtls","amortList","j","amortBase","baseDtls","Math","max","iPrime","numericValueBal","round","pow","numericValuePmt","dRSPmt","origSchedule","amortSchedule","planBalances","planPayments","setZero","freshStartSchedule","begBalance","period","inputFS","_inputFS","_callee14","selectedPlan","selectedPeriod","_barChartHypUAL$data$","hypArray","_context14","unshift","_toConsumableArray","update","dropDPopulate","valueArray","dropdownElement","option","text","getSelectedDropD","dropDown","containerName","canvasName","container","oldCanvas","removeChild","newCanvas","id","rate","origPer","remPer","rampPer","presVal","rampFlag","annuityFactor","dRSPresVal","min","x","myPresVal","pmt","step","numRampDowns","rampUp","rampDown","nPer","futVal","beg","plugins","register","afterDatasetsDraw","chart","easing","ctx","grandTotal","labelIndex","total","highestIndex","dataset","datasetIndex","getDatasetMeta","hidden","xPos","_model","yPos","save","translate","rotate","PI","fillStyle","font","textAlign","fillText","toString","restore","textBaseline","___HTML_LOADER_IMPORT_0___","URL","___HTML_LOADER_IMPORT_1___","___HTML_LOADER_IMPORT_2___","___HTML_LOADER_IMPORT_3___","___HTML_LOADER_IMPORT_4___","___HTML_LOADER_IMPORT_5___","___HTML_LOADER_IMPORT_6___","___HTML_LOADER_IMPORT_7___"],"sourceRoot":""}